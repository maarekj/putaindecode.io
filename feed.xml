<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[putaindecode.io]]></title><description><![CDATA[putaindecode.io]]></description><link>http://putaindecode.io</link><generator>RSS for Node</generator><lastBuildDate>Thu, 09 Nov 2017 09:40:40 GMT</lastBuildDate><atom:link href="http://putaindecode.io/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[ReasonReact, pour une UI qu'elle est bien typ√©e]]></title><description><![CDATA[<p>Si comme moi, depuis l‚Äôapparition de React, vous vous √™tes de plus en int√©ress√©s au typage pour vos applications front (c'est √ßa de commencer avec JS‚Ä¶), vous avez certainement utilis√© les <code>propTypes</code> au d√©but en vous disant "putain c'est cool de v√©rifier les types, √ßa m'√©vite bien des probl√®mes". Puis c‚Äô√©tait sympa mais bon, faut quand m√™me ex√©cuter le bout de code qui p√®te et il est peut-√™tre super chiant d'y acc√©der dans l'app. Du coup, vous vous √™tes s√ªrement tourn√©s vers Flow ou TypeScript.</p>
<p>Dans cet article, on va d√©couvrir la <em>next-step</em> dans ce cheminement : √©crire nos composants React dans un langage statiquement et fortement typ√©: Reason üöÄ. Reason, c'est OCaml, avec son type-system puissant et une syntaxe plus simple quand on vient du JS. Si vous n‚Äôavez pas lu <a href="/fr/articles/reason/introduction-reason/">l‚Äôintroduction √† ce langage</a>, c‚Äôest le moment.</p>
<p>L√†, je vais vous pr√©senter <strong>ReasonReact</strong>, des bindings API par dessus ReactJS support√©s officiellement par l'√©quipe de Reason. Facebook <em>dogfood</em> la solution puisqu'elle est utilis√©e sur messenger.com pour la majeure partie de ses composants.</p>
<h2 id="stateless"><a href="#stateless" class="phenomic-HeadingAnchor">#</a>Stateless</h2>
<p>Commen√ßons par le traditionnel HelloWorld‚Ñ¢ :</p>
<pre><code class="hljs language-reason">/* Un composant ReasonReact se cr√©e en deux temps: d'abord on cr√©e le <span class="hljs-code">`component`</span>
   √† partir d‚Äôun appel √† <span class="hljs-code">`statelessComponent`</span> ou <span class="hljs-code">`reducerComponent`</span> (il existe d'autres
   cas plus avanc√©s, mais on s'y attardera pas dans cet article d'introduction). */
let component = ReasonReact.statelessComponent("HelloWorld");

/* Ensuite, on d√©clare une fonction <span class="hljs-code">`make`</span> qui prend des arguments nomm√©s
   (qui √©quivalent aux <span class="hljs-code">`props`</span> de ReactJS) et un dernier argument non-nomm√©,
   contenant les <span class="hljs-code">`children`</span>. Cette fonction doit retourner un record, dans
   lequel on spread notre <span class="hljs-code">`component`</span> et dans lequel on d√©finit une propri√©t√©
   <span class="hljs-code">`render`</span> qui prend comme param√®tre <span class="hljs-code">`self`</span> (√©quivalent du <span class="hljs-code">`this`</span>) et qui retourne
   un √©l√©ment React. L√†-dessus √ßa devrait pas trop vous chambouler de ce que
   vous connaissez de React.
   On peut remarquer que les props sont les arguments de la fonction <span class="hljs-code">`make`</span>,
   comme avec les composants fonctionnels de ReactJS.*/
let make = (~message, _children) => {
  ...component,
  render: (_self) =>
<span class="hljs-code">    &#x3C;div></span>
<span class="hljs-code">      (ReasonReact.stringToElement message)</span>
<span class="hljs-code">    &#x3C;/div></span>
};</code></pre>
<p>Et pour monter le composant :</p>
<pre><code class="hljs language-reason">ReactDOMRe.renderToElementWithId(&#x3C;HelloWorld <span class="hljs-keyword">message</span>=<span class="hljs-string">"Helloworld"</span> />, <span class="hljs-string">"root"</span>);</code></pre>
<p>Un des gros avantages √† utiliser Reason, c‚Äôest que le langage est capable d‚Äôinf√©rer la grande majorit√© des types et sera en mesure de d√©tecter dans toute l‚Äôapp si quelque chose n‚Äôest pas pass√© correctement : pour le langage, il s‚Äòagit simplement de fonctions qui appellent d‚Äôautres fonctions, et les langages fonctionnels statiquement et fortement typ√©s sont plut√¥t pas d√©gueulasses pour √ßa.</p>
<h2 id="stateful"><a href="#stateful" class="phenomic-HeadingAnchor">#</a>Stateful</h2>
<p>La petite particularit√© de ReasonReact vis √† vis des composants stateful, c‚Äôest que les mises √† jour d'√©tats doivent passer par un reducer, comme si chaque composant embarquait sa petite impl√©mentation de redux.</p>
<p>Maintenant, comment qu'on fait pour cr√©er un composant stateful ?</p>
<p>On commence par d√©finir le type du state : contrairement √† JS, il ne s'agit pas forc√©ment d'un objet, √ßa peut √™tre une cha√Æne de caract√®re, un entier, un variant, un boolean, un arbuste, une map, un jus de fruits frais, un tableau, whatever.</p>
<pre><code class="hljs language-reason">type <span class="hljs-keyword">state</span> = {
  counter: int
};</code></pre>
<p>On va d√©finir notre type action, sous la forme de variants: chaque variant repr√©sente un des type d‚Äôaction possible. Pour bien se repr√©senter ce qu'est une action, c‚Äôest un token, contenant possiblement des param√®tres, qu‚Äôon va envoyer √† notre fameux reducer qui, lui, retournera une r√©action √† cette action.</p>
<pre><code class="hljs language-reason">type action =
  <span class="hljs-string">| Increment</span>
  <span class="hljs-string">| Decrement;</span></code></pre>
<p>Dans le composant retourn√© par <code>make</code>, on ajoute une fonction <code>initialState</code> qui retourne‚Ä¶ l'√©tat initial (c'est bien, vous suivez), et une fonction <code>reducer</code>, qui effectue un pattern-matching sur l‚Äôaction et retourne une update.
Cette fonction prend deux param√®tres: l'<code>action</code> √† traiter et le <code>state</code> √† jour (comme lorsque l'on passe un callback √† <code>setState</code> dans l'√©quivalent JavaScript <code>setState(state => newState)</code>).</p>
<p>L‚Äôupdate retourn√©e indique au component comment il doit se mettre √† jour (ici sont list√©s les cas courants) :</p>
<ul>
<li><code>NoUpdate</code>, pour ne rien faire</li>
<li><code>Update</code>, pour mettre √† jour l‚Äô√©tat et re-rendre le composant</li>
<li><code>SideEffect</code> pour lancer un effet de bord (e.g. une requ√™te r√©seau)</li>
<li><code>UpdateWithSideEffect</code>, pour changer le state et lancer un effet de bord (e.g. afficher un loader et lancer une requ√™te)</li>
</ul>
<p><em>Wrapping up</em> :</p>
<pre><code class="hljs language-reason">type <span class="hljs-keyword">state</span> = {counter: int};

type action =
  | Increment
  | Decrement;

/* Il faut bien d√©finir le `component` **apr√®s** les types `<span class="hljs-keyword">state</span>` et `action`, pour qu'il puisse les lire */
let component = ReasonReact.reducerComponent(<span class="hljs-string">"Count"</span>);

let make = (~initialCounter=<span class="hljs-number">0</span>, _) => {
  ...component,
  initialState: () => {counter: initialCounter},
  reducer: (action, <span class="hljs-keyword">state</span>) =>
    /* Toutes mes updates passent par l√†, bien pratique pour qu'une
      personne puisse aborder rapidement le composant */
    switch action {
    | Increment => ReasonReact.Update({counter: <span class="hljs-keyword">state</span>.counter + <span class="hljs-number">1</span>})
    | Decrement => ReasonReact.Update({counter: <span class="hljs-keyword">max</span>(<span class="hljs-number">0</span>, <span class="hljs-keyword">state</span>.counter - <span class="hljs-number">1</span>)})
    },
  render: ({<span class="hljs-keyword">state</span>, reduce}) =>
    <span class="hljs-variable">&#x3C;div></span>
      (ReasonReact.stringToElement(<span class="hljs-keyword">state</span>.counter |> string_of_int))
      /* La fonction reduce prend une fonction qui retourne l'action.
           Il s'agit d'une fonction pour lire les propri√©t√©s des
           events (qui sont pooled dans React) de mani√®re synchrone, alors
           que le reducer est appel√© de mani√®re asyncrhone.
         */
      <span class="hljs-variable">&#x3C;button onClick=(reduce((_event) =></span> Decrement))> (ReasonReact.stringToElement(<span class="hljs-string">"-"</span>)) &#x3C;/button>
      <span class="hljs-variable">&#x3C;button onClick=(reduce((_event) =></span> Increment))> (ReasonReact.stringToElement(<span class="hljs-string">"+"</span>)) &#x3C;/button>
    &#x3C;/div>
};</code></pre>
<p>et hop:</p>
<pre><code class="hljs language-reason">ReactDOM.renderToElementWithId(&#x3C;Count <span class="hljs-attribute">initialCount</span>=0 />, <span class="hljs-string">"App"</span>);</code></pre>
<h2 id="with-side-effects"><a href="#with-side-effects" class="phenomic-HeadingAnchor">#</a>With side-effects</h2>
<p>Bien que √ßa puisse para√Ætre un peu lourd de devoir faire un <code>reducer</code> pour g√©rer ses updates, √ßa apporte quand m√™me:</p>
<ul>
<li>Un seul endroit par composant o√π toutes les updates passent</li>
<li>La possibilit√© pour le compiler de d√©tecter si l'on oublie de g√©rer des actions</li>
<li>De g√©rer lisiblement et uniform√©ment les effets de bord</li>
</ul>
<p><img src="./terminal.png" alt="" /></p>
<p>Exemple ici avec un composant o√π on va faire comme si on r√©cup√©rait l'utilisateur connect√© sur une API.</p>
<pre><code class="hljs language-reason"><span class="hljs-keyword">let</span> resolveAfter = (ms) =>
  Js.Promise.make(
    (~resolve, ~reject <span class="hljs-built_in">as</span> <span class="hljs-keyword">_</span>) => ignore(Js.<span class="hljs-keyword">Global</span>.setTimeout(() => [@bs] resolve(ms), ms))
  );

module User = {
  type t = {username: string};
  /* faisons comme si on avait un appel serveur
     (je le fais comme √ßa pour que vous puissiez copier/coller le code
     pour essayer chez vous) */
  <span class="hljs-keyword">let</span> getUser = (<span class="hljs-keyword">_</span>) =>
    resolveAfter(<span class="hljs-number">1000</span>)
    |<span class="hljs-type">> Js</span>.Promise.then_(
         (<span class="hljs-keyword">_</span>) =>
           Js.Promise.resolve({
             username: <span class="hljs-string">"MyUsername"</span> ++ string_of_int(Js.Math.random_int(<span class="hljs-number">0</span>, <span class="hljs-number">9999</span>))
           })
       );
};

/* Le <span class="hljs-string">"user"</span> distant peut avoir <span class="hljs-number">4</span> √©tats possibles ici */
type resource('a) =
  | <span class="hljs-type">Inactive</span>
  | <span class="hljs-type">Loading</span>
  | <span class="hljs-type">Idle</span>('a)
  | <span class="hljs-type">Errored</span>;

type action =
  | <span class="hljs-type">Load</span>
  | <span class="hljs-type">Receive</span>(resource(User.t));

type state = {user: resource(User.t)};

<span class="hljs-keyword">let</span> component = ReasonReact.reducerComponent(<span class="hljs-string">"User"</span>);

<span class="hljs-keyword">let</span> getUser = (credentials, {ReasonReact.reduce}) =>
  ignore(
    User.getUser(credentials)
    /* Si tout s'est bien pass√© */
    |<span class="hljs-type">> Js</span>.Promise.then_(
         /* On peut utiliser les actions en dehors du `make`: c'est juste des variants */
         (payload) => Js.Promise.resolve(reduce((payload) => Receive(Idle(payload)), payload))
       )
    /* Si √ßa a merd√© */
    |<span class="hljs-type">> Js</span>.Promise.catch((<span class="hljs-keyword">_</span>) => Js.Promise.resolve(reduce(() => Receive(Errored), ())))
  );

<span class="hljs-keyword">let</span> make = (~credentials, <span class="hljs-keyword">_</span>) => {
  ...component,
  initialState: () => {user: Inactive},
  reducer: (action, _state) =>
    switch action {
    /* UpdateWithSideEffects met √† jour l'√©tat, puis lance l'effet de bord,
       tr√®s pratique pour ce genre de cas */
    | <span class="hljs-type">Load</span> => ReasonReact.UpdateWithSideEffects({user: Loading}, getUser(credentials))
    | <span class="hljs-type">Receive</span>(user) => ReasonReact.Update({user: user})
    },
  didMount: ({reduce}) => {
    reduce(() => <span class="hljs-keyword">Load</span>, ());
    ReasonReact.NoUpdate
  },
  render: ({state, reduce}) =>
    &#x3C;div>
      (
        ReasonReact.stringToElement(
          switch state.user {
          | <span class="hljs-type">Inactive</span>
          | <span class="hljs-type">Loading</span> => <span class="hljs-string">"Loading ..."</span>
          | <span class="hljs-type">Idle</span>(user) => <span class="hljs-string">"Hello "</span> ++ user.username
          | <span class="hljs-type">Errored</span> => <span class="hljs-string">"An error occured"</span>
          }
        )
      )
      &#x3C;div>
        &#x3C;button
          disabled=(
            switch state.user {
            | <span class="hljs-type">Idle</span>(<span class="hljs-keyword">_</span>) => Js.false_
            | <span class="hljs-type">_</span> => Js.true_
            }
          )
          onClick=(reduce((<span class="hljs-keyword">_</span>) => <span class="hljs-keyword">Load</span>))>
          (ReasonReact.stringToElement(<span class="hljs-string">"Reload"</span>))
        &#x3C;/button>
      &#x3C;/div>
    &#x3C;/div>
};</code></pre>
<h2 id="oui-mais-est-ce-que-je-peux-lutiliser-aujourdhui-alors-que-jai-d√©j√†-une-grosse-codebase-reactjs-"><a href="#oui-mais-est-ce-que-je-peux-lutiliser-aujourdhui-alors-que-jai-d%C3%A9j%C3%A0-une-grosse-codebase-reactjs-" class="phenomic-HeadingAnchor">#</a>Oui mais est-ce que je peux l'utiliser aujourd'hui alors que j'ai d√©j√† une grosse codebase ReactJS ?</h2>
<p><img src="./tenor.gif" alt="" /></p>
<p>Pour utiliser des composants ReasonReact avec ReactJS</p>
<pre><code class="hljs language-reason">let jsComponent =
  ReasonReact.wrapReasonForJs(
    ~component,
    <span class="hljs-function"><span class="hljs-params">(jsProps)</span> =></span>
      make(
        ~credentials=jsProps<span class="hljs-comment">##credentials,</span>
        [||]
      )
  );</code></pre>
<p>et</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> MyComponent = <span class="hljs-built_in">require</span>(<span class="hljs-string">"path/to/reason/output"</span>).jsComponent;</code></pre>
<p>√Ä l'inverse, pour utiliser des composants ReactJS avec ReasonReact</p>
<pre><code class="hljs language-js">[@bs.module <span class="hljs-string">"path/to/good/old/reactjs/component"</span>] external myJsComponent : ReasonReact.reactClass = <span class="hljs-string">"default"</span>;

<span class="hljs-keyword">let</span> make = <span class="hljs-function">(<span class="hljs-params">~message: string, _children</span>) =></span>
  ReasonReact.wrapJsForReason(
    ~reactClass=myJsComponent,
    ~props={<span class="hljs-string">"message"</span>: message},
    [||]
 ¬†);</code></pre>
<p>Voil√† pour les <em>basics</em> de ReasonReact. Pour en savoir plus, y a <a href="https://reasonml.github.io/reason-react/">la petite doc qui va bien</a>, et on vous pr√©parera un petit article sur les aspects un peu plus avanc√©s de l'usage.</p>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/reason/reasonreact/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/reason/reasonreact/</guid><pubDate>Thu, 09 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[D√©velopper avec Create React App et une API Node.js]]></title><description><![CDATA[<h2 id="tldr"><a href="#tldr" class="phenomic-HeadingAnchor">#</a>tl;dr</h2>
<p>Dans un environnement de d√©veloppement, pour lancer dans le m√™me temps votre application React et une API bas√©e sur Node.js, vous pouvez imbriquer judicieusement les deux d√©p√¥ts Git, puis utiliser un script NPM et quelques packages bien pratiques tels que <em>concurrently</em> et <em>nodemon</em> pour lancer les deux serveurs d'une seule commande. Pratique ! D'autant que pour contourner les restrictions d'acc√®s li√©es √† la <a href="https://fr.wikipedia.org/wiki/Same-origin_policy"><em>politique de m√™me origine</em></a>, <strong>create-react-app</strong> permet le param√©trage d'un <em>proxy</em> pour vos requ√™tes API.</p>
<h2 id="est-ce-que-√ßa-me-concerne-"><a href="#est-ce-que-%C3%A7a-me-concerne-" class="phenomic-HeadingAnchor">#</a>Est-ce que √ßa me concerne ?</h2>
<p>La g√©n√©ralisation des architectures dites "API first" r√©pond √† des imp√©ratifs humains et techniques tr√®s divers. En ce qui concerne l'organisation du travail des d√©veloppeurs, c'est l'assurance de pouvoir scinder l'impl√©mentation de l'acc√®s aux donn√©es -aux ressources- d'une part, et le travail sur l'UI/UX, d'autre part. Un premier groupe peut concevoir une API robuste et proposer un "contrat" clair √† l'√©quipe <em>frontend</em> qui acc√®de aux donn√©es avec un r√©f√©rentiel unique, que l'application soit web ou mobile.</p>
<p>De cette fa√ßon, la conception de l'interface utilisateur est lib√©r√©e d'une grande partie des contraintes qui r√©gissent les architectures MVC traditionnelles. Le d√©veloppeur peut ainsi mieux se concentrer sur la qualit√© de sa r√©ponse aux sp√©cifications fonctionnelles.</p>
<p>Si l'architecture de votre projet est de ce type, et que vous attaquez la conception d'un frontend <a href="https://fr.wikipedia.org/wiki/Application_web_monopage">SPA</a> React avec <a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> (quelle bonne id√©e !), ce qui suit peut vous √©clairer. Nous allons voir comment il est possible d'acc√©der sans se compliquer la vie √† une API RESTful bas√©e sur Node.js, en imbriquant correctement ses d√©p√¥ts.</p>
<h2 id="deux-d√©p√¥ts--le-frontend-lapi"><a href="#deux-d%C3%A9p%C3%B4ts--le-frontend-lapi" class="phenomic-HeadingAnchor">#</a>Deux d√©p√¥ts : le frontend, l‚ÄôAPI</h2>
<p>Le principe est le suivant : vous ne souhaitez pas forc√©ment modifier l'API qui est impl√©ment√©e par une autre √©quipe, ou par un coll√®gue, mais vous devez y acc√©der facilement depuis votre application React.</p>
<p>Vous allez pour cela devoir travailler sur deux d√©p√¥ts Git clon√©s : celui du <em>frontend</em> React contiendra par exemple celui de l'API, et un <em>script NPM</em> se chargera de lancer les deux applications, sur deux ports diff√©rents.</p>
<p><em>Faut-il utiliser un framework en particulier pour le backend ?</em><br>
Absolument pas ! Pour ma part je travaille plus volontiers avec <a href="https://loopback.io/">LoopBack</a>, mais tout ce que qui s'appuie sur Node.js fait l'affaire.</p>
<h2 id="organisation-locale-du-code"><a href="#organisation-locale-du-code" class="phenomic-HeadingAnchor">#</a>Organisation locale du code</h2>
<p>Mettons que votre projet React s'appelle <strong>my-react-frontend</strong> et que l'API qu'il consomme r√©pond au doux nom de <strong>my-node-api</strong>.</p>
<p><strong>my-react-frontend</strong> est clon√© √† la racine, c'est le projet parent. Il contient au moins les r√©pertoires <code>src/</code>, <code>public/</code> et <code>node_modules/</code> g√©n√©r√©s par <em>create-react-app</em>.</p>
<p><code>build/</code> peut √©galement √™tre pr√©sent si vous avez d√©j√† lanc√© au moins une fois la commande <code>npm run build</code>.</p>
<p>A la racine de <strong>my-react-frontend</strong>, clonez le d√©p√¥t <strong>my-node-api</strong>.</p>
<p>Vous devez obtenir :</p>
<pre><code>my-react-frontend/
-- my-node-api/
-- node_modules/
-- public/
-- src/
...
</code></pre>
<p>Ne nous attardons pas trop sur <code>my-node-api</code>, qui peut √™tre impl√©ment√© de tr√®s nombreuses mani√®res. Partons du principe qu'une fois lanc√©, le serveur expose les ressources dont votre application a besoin sur <code>http://localhost:3001</code>. Et disons juste que si l'√©quipe <em>backend</em> vous signale une mise √† jour, vous ferez simplement :</p>
<pre><code class="hljs language-Shell">cd my-node-api/
git pull</code></pre>
<p><em>Faut-il forc√©ment organiser les d√©p√¥ts de cette fa√ßon ?</em><br>
Pas du tout. Mais l'int√©r√™t de cette configuration, c'est que le <em>backend</em> est "dans sa bulle" et que les d√©veloppeurs qui le font √©voluer n'ont pas √† organiser le code en fonction de ce <em>frontend</em> en particulier.</p>
<p>Derni√®re chose importante : pensez √† ajouter <code>my-node-api/</code> au fichier <code>.gitignore</code> du projet React. Il ne faudrait √©videmment pas qu'il versionne le <em>backend</em>.</p>
<h2 id="passez-moi-sur-le-cors"><a href="#passez-moi-sur-le-cors" class="phenomic-HeadingAnchor">#</a>Passez moi sur le CORS</h2>
<p>En production, il est fr√©quent d'utiliser le m√™me serveur pour servir l'application React et l'API sous-jacente. Dans cette configuration, le m√©canisme de <em>Cross-origin resource sharing</em> (<a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>), bas√© sur des headers HTTP, n'a pas √† √™tre impl√©ment√©.</p>
<p>En d√©veloppement, par contre, il est plus pratique de dissocier les serveurs pour b√©n√©ficier de toutes les fonctionnalit√©s de l'√©cosyst√®me React.</p>
<p>Pour r√©pondre √† cette contrainte, <em>create-react-app</em> propose <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#proxying-api-requests-in-development">un m√©canisme</a> qui permet de mettre en place un <strong>proxy</strong> d'API.</p>
<p>En partant du principe que votre frontend √©coute sur le port 3000, et le serveur API sur le port 3001, il suffit d'ajouter un param√®tre au premier niveau du <code>package.json</code> :</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">"proxy"</span>: <span class="hljs-string">"http://localhost:3001"</span>,
}</code></pre>
<p>De cette fa√ßon, vous pourrez utiliser un chemin relatif pour acc√©der √† vos ressources. Si une requ√™te ne concerne pas un <em>asset</em> statique, elle sera relay√©e vers votre <em>backend</em>. <code>fetch('/api/bananas')</code>, par exemple, requ√™tera notre API sur <code>http://localhost:3001/api/bananas</code>.</p>
<h2 id="tout-lancer-en-une-seule-commande"><a href="#tout-lancer-en-une-seule-commande" class="phenomic-HeadingAnchor">#</a>Tout lancer en une seule commande</h2>
<p>Nous utiliserons pour cela un script NPM d√©fini dans le <code>package.json</code> situ√© √† la racine du projet React.</p>
<p>Deux petits outils seront n√©cessaires pour cr√©er le script <em>ad hoc</em> :</p>
<ul>
<li>le package <a href="https://www.npmjs.com/package/concurrently"><code>concurrently</code></a> qui permet de lancer plusieurs scripts en une seule commande. Faites par exemple un <code>npm install --save-dev concurrently</code>.</li>
<li>le package <a href="https://www.npmjs.com/package/nodemon"><code>nodemon</code></a> qui scrute votre <em>backend</em> Node.js et relance le serveur automatiquement en cas de modification du code. Faites donc un <code>npm install --save-dev nodemon</code>, vous ne le regretterez pas.</li>
</ul>
<p>Tout est pr√™t ! Ouvrez <code>package.json</code> et ajoutez dans les <code>scripts</code>:</p>
<pre><code class="hljs language-json"><span class="hljs-string">"start-with-api"</span>: <span class="hljs-string">"concurrently \"react-scripts start\" \"PORT=3001 nodemon ./my-node-api/server/server.js\""</span></code></pre>
<p>Le chemin d'acc√®s au script serveur est √† adapter en fonction de vos propres choix techniques ! Notez que dans ce cas pr√©cis, on passe une variable d'environnement <code>PORT</code> que le script serveur utilise pour √©craser son port d'√©coute par d√©faut.</p>
<p>Au final, le <code>package.json</code> doit ressembler √† ceci :</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"my-react-frontend"</span>,
  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"0.1.0"</span>,
  <span class="hljs-attr">"private"</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">"proxy"</span>: <span class="hljs-string">"http://localhost:3001"</span>,
  <span class="hljs-attr">"scripts"</span>: {
    <span class="hljs-attr">"start"</span>: <span class="hljs-string">"react-scripts start"</span>,
    <span class="hljs-attr">"start-with-api"</span>: <span class="hljs-string">"concurrently \"react-scripts start\" \"PORT=3001 nodemon ./my-node-api/server/server.js\""</span>,
    <span class="hljs-attr">"build"</span>: <span class="hljs-string">"react-scripts build"</span>,
    <span class="hljs-attr">"test"</span>: <span class="hljs-string">"react-scripts test --env=jsdom"</span>,
    <span class="hljs-attr">"eject"</span>: <span class="hljs-string">"react-scripts eject"</span>
  },
  <span class="hljs-attr">"devDependencies"</span>: {
    <span class="hljs-attr">"react-scripts"</span>: <span class="hljs-string">"1.0.14"</span>,
    <span class="hljs-attr">"concurrently"</span>: <span class="hljs-string">"3.5.0"</span>,
    <span class="hljs-attr">"nodemon"</span>: <span class="hljs-string">"1.12.1"</span>
  },
  <span class="hljs-attr">"dependencies"</span>: {
    <span class="hljs-attr">"react"</span>: <span class="hljs-string">"^16.0.0"</span>,
    <span class="hljs-attr">"react-dom"</span>: <span class="hljs-string">"^16.0.0"</span>
  }
}</code></pre>
<p>Pour m√©moire, nous n'avons ajout√© que deux lignes : "proxy" et "scripts/start-with-api".</p>
<h2 id="une-astuce-pour-les-press√©s"><a href="#une-astuce-pour-les-press%C3%A9s" class="phenomic-HeadingAnchor">#</a>Une astuce pour les press√©s</h2>
<p>Si le backend ne joue pas un grand r√¥le dans votre application ou si -plus probablement- vous souhaitez d√©marrer sans attendre que le v√©ritable backend soit disponible, je vous conseille de tester l'excellent <a href="https://github.com/typicode/json-server"><code>json-server</code></a>.</p>
<p>Cet √©l√©gant package offre la possibilit√© de cr√©er un fichier JSON avec quelques donn√©es factices (<em>data fixtures</em>) et de les mettre √† disposition de votre application √† la fa√ßon d'une API RESTful, gr√¢ce √† un simple <code>json-server --watch db.json</code>.</p>
<p>Il va sans dire qu'en modifiant l√©g√®rement le script <em>start-with-api</em>, vous disposerez en quelques secondes d'un <em>backend</em> au poil pour votre nouvelle application.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/react/create-react-app-et-api/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/react/create-react-app-et-api/</guid><pubDate>Tue, 07 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction √† l'Overlay Manager Service, expliqu√© par quelqu'un qui n'y conna√Æt rien]]></title><description><![CDATA[<blockquote>
<p>DISCLAIMER : J'entrave pas un keyword de Java, j'ai jamais d√©velopp√© une seule app native, et plus globalement, je ne connais vraiment pas mon sujet. Ainsi, si quelqu'un s'y connaissant mieux que moi passe par l√†, qu'il n'h√©site surtout pas √† me corriger et √† m'afficher devant la plan√®te enti√®re, j'ai besoin de nourrir mon syndrome de l'imposteur.</p>
</blockquote>
<p>Salut les copains aujourd'hui tonton FoetusBoy (SkinnyFoetusDaron) (moi) va vous parler d'un sujet qu'il ne conna√Æt pas et qui s'ins√®rera √† ce titre aux c√¥t√©s d'autres sujets qu'il ne conna√Æt pas tels que la joie de vivre, les souvenirs des jours joyeux et comment ne pas parler de soi √† la troisi√®me personne.</p>
<p>Ouvrez vos calepins √† la page bullshit, on va faire un cours sur l'Overlay Manager Service (ou OMS) d'Android, sur comment √ßa fonctionne et comment vous allez pouvoir l'utiliser pour faire des trucs moches.</p>
<figure>
  <img src="OMS-moche.png" alt="hahaha comment c'est trop moche" />
  <figcaption>J'ai s√©ch√© les cours de th√©orie des couleurs</figcaption>
</figure>
<p>Okay alors maintenant que vos r√©tines sont perp√©tuellement d√©molies par cette capture d'√©cran et que votre curiosit√© est piqu√©e au vif, on attaque le cours d'histoire.
Fin 2015, deux ing√©nieurs de chez Sony Mobile, M√•rten Kongstad et Martin Wallgren, que j'identifie √† 99% de chances comme √©tant probablement tous les deux Su√©dois (et qui illustrent bien l'inventivit√© de ce peuple lorsqu'il s'agit de trouver toutes les fa√ßons de nommer quelqu'un Martin), co√©crivent un commit dans l'AOSP (Android Open-Source Project), sous le chouette identifiant "OMS: introduce the OverlayManagerService". Cet √©v√©nement est chouette pour deux raisons :</p>
<ul>
<li>La premi√®re est qu'Android √©tant malgr√© le contr√¥le de Google un projet open-source, c'est toujours int√©ressant de voir les constructeurs participer un peu au projet (les mauvaises langues diront que seul Sony joue vraiment le jeu de l'open-source et les mauvaises langues n'auraient pas vraiment tort).</li>
<li>La deuxi√®me est que √ßa marque l'arriv√©e sur Android d'un v√©ritable syst√®me de theming (th√©matisation en Fran√ßais, donc je vais dire theming plut√¥t hein), permettant ainsi aux constructeurs d'impl√©menter leurs customisations de fa√ßon beaucoup plus souple et surtout aux initi√©s (moi et bient√¥t vous) de s'amuser un peu.</li>
<li>Troisi√®me raison (bonus) : C'√©tait bient√¥t No√´l et cette ann√©e-l√† on m'avait offert un joli manteau.</li>
</ul>
<p>Commen√ßons. Comme son nom l'indique si vous parlez la langue de Jay-Z, l'Overlay Manager Service est un service de gestion de surcouches.</p>
<figure>
  <img src="jayz.png" alt="" />
  <figcaption>Si votre Google Translate n'a pas l'option de traduction de Jay-Z vers Moli√®re c'est que vous n'avez pas souscrit √† un abonnement Translate Gold</figcaption>
</figure>
<p>L'OMS est lui-m√™me le successeur du RRO, pour "Runtime Resource Overlay", ancien syst√®me propri√©taire de Sony Mobile, utilis√© en interne pour d√©ployer et param√©trer rapidement leur surcouche √† Android en fonction des demandes et besoins des op√©rateurs et des mises √† jour d'Android lui-m√™me ou bien pour faire fonctionner les Th√®mes Xperia (on conna√Æt Sony assez friands de la customisation par les utilisateurs depuis la sortie de la PS3, surtout quand il s'agit de vendre des th√®mes √† 25$).</p>
<p>Ce Runtime Resource Overlay (surcouches de ressources √† l'ex√©cution) s'opposait √† l'outil Static Resource Overlay (surcouches de ressources statiques), un flag du packager d'Android (aapt) qui √©tait comme qui dirait "bien mais pas top" : il permettait de s√©parer le code source d'une application de sa surcouche pour garder une base de travail propre (bien) mais ces surcouches ne pouvaient √™tre install√©es qu'√† la compilation de l'app, les rendant donc chiantes √† d√©bugger et n√©cessitaient plus ou moins qu'on soit le vendor original de l'application √† modifier (pas top). Le principal int√©r√™t du RRO √©tait donc de faire sauter ces "barri√®res".</p>
<p>Voyant donc que l'un des principaux reproches faits √† Android, √† raison ou √† tort (√† raison hein, on va pas se mentir) √©tait sa fragmentation et que l'un de ses facteurs (mais non le seul) √©tait li√© aux <em>vendors</em> (Samsung.) mettant trop de temps √† recoder leur surcouche de A √† Z √† chaque version d'Android (et que de toute fa√ßon pourquoi s'emmerder √† mettre √† jour un t√©l√©phone gratuitement alors que tu peux en vendre un nouveau pour 700 p√©trodollars <em>allez ach√®te, vil consommateur</em> ?) les braves petits ing√©s de chez Sony ont pr√©f√©r√© faire une petite PR sympa du c√¥t√© de l'AOSP pour ajouter ce syst√®me de surcouches en natif dans Android.
Rest√© dormant pendant quelques temps, l'OMS a enfin √©t√© activ√© de fa√ßon officielle (√† peu pr√®s) par Google, lors de la sortie d'Android 8.0 Oreo, qui en tire une utilit√© assez basique mais prometteuse : changer litt√©ralement une seule couleur dans l'interface, sp√©cifiquement pour les t√©l√©phones Pixel.</p>
<figure>
  <img src="epoustouflan.png" alt="√©poustouflan" />
  <figcaption>√©poustouflan</figcaption>
</figure>
<p>√áa peut para√Ætre peu mais c'est finalement ce genre de modifications √† la con qui peut consid√©rablement ralentir le portage d'une nouvelle version d'Android sur un device existant. Ouvrons un peu le ventre de la b√™te.</p>
<p>Un overlay, √ßa fonctionne assez simplement. Il prend la forme d'un Android PacKage (ci-apr√®s APK), le format standard des applications Android, genre de point JAR survitamin√©, qu'il conviendra donc de signer s'il vous pla√Æt merci c'est important bonne journ√©e, si vous comptez l'installer par vous-m√™me en dehors de l'IDE consacr√© (Android Studio, donc). De par sa nature d'APK, un overlay devra donc contenir un AndroidManifest.xml, sorte de package.json si je devais faire une √©quivalence avec le dev web, cet AndroidManifest donc, qui prendra la forme suivante :</p>
<pre><code>&#x3C;?xml version="1.0" encoding="utf-8" standalone="no"?>
&#x3C;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="LePetitNomDeMonPackage">
    &#x3C;overlay android:priority="1000" android:targetPackage="LePetitNomDuPackageCible"/>
&#x3C;/manifest>
</code></pre>
<p>Mettons les points sur les i et d√©finissons imm√©diatement ce qu'un overlay n'est pas :
un overlay n'est <em>pas</em> une extension d'application, il ne peut en aucun cas rajouter des fonctionnalit√©s √† une application existante, de la m√™me mani√®re que vous gal√©reriez √† rajouter des features √† un site existant juste en modifiant son CSS. En somme, √† peu de choses pr√®s, un overlay se r√©duit √† une feuille de style o√π toutes les d√©clarations seraient faites avec <code>!important</code> et comme on aime les bonnes pratiques bien maintenables chez PutainDeCode on vous rappellera de ne <em>JAMAIS</em> faire √ßa s'il vous pla√Æt.</p>
<p>L√† o√π la comparaison s'arr√™te c'est que contrairement √† CSS, les ressources d'une application ne comprennent pas que les couleurs et occasionnellement les dimensions des blocs, mais peuvent renfermer les ic√¥nes, les sons, les images, et √† peu pr√®s tout ce que le d√©veloppeur original a voulu foutre dedans.</p>
<p>En r√©sum√©, rajouter une feature pour envoyer des SMS depuis votre lecteur de musique : c'est non; remplacer toutes les couleurs d'une appli par du rose, les typos par du Comic Sans MS et les sons d'interactions par le bruit d'un canard qui fait "Coin coin" : c'est oui.</p>
<p>D'ailleurs on va rendre l'application Calculatrice (dont le nom de package est "com.google.android.calculator", √ßa servira plus tard) toute rose parce que pourquoi pas.
En d√©compilant donc l'APK √† l'aide de notre fid√®le <a href="https://ibotpeaches.github.io/Apktool/">apktool</a>, nous voil√† dans le c≈ìur du code, dans la matrice, dans la mer num√©rique, bref, dans un sacr√© paquet de fichiers XML.</p>
<figure>
  <img src="chosenOne.png" alt="Mes coll√®gues d√©testent que je dise I'm in √† chaque fois que je fais un git pull" />
  <figcaption>*hacker voice* I'm in</figcaption>
</figure>
<p>Selon toute logique, la gestion des couleurs de l'app va probablement se retrouver dans un fichier qui s'appelle √† peu pr√®s <code>colors.xml</code>, ce qui n'est pas √©tonnant parce que c'est comme √ßa qu'on nomme ses fichiers quand on veut s'y retrouver, j'ai appris √ßa √† l'√©cole quand je mettais des gommettes sur mes cahiers.
Il s'agit donc maintenant de voir ce √† quoi sert chaque valeur dans ce fichier. Si vous arrivez √† d√©duire le code hexa d'une couleur juste en la regardant, f√©licitations, vous √™tes probablement un Terminator. Pour ceux qui ne sont pas des robots tueurs venus du turfu, faire une capture d'√©cran de l'application et ouvrir celle-ci dans Photoshop fonctionne tr√®s bien aussi.</p>
<figure>
  <img src="colors.png" alt="Featuring l'outil pipette de Photoshop, on applaudit l'outil pipette de Photoshop" />
  <figcaption>Devinez √† quel moment j'en ai eu marre de faire de belles fl√®ches bien droites</figcaption>
</figure>
<p>Les trois valeurs nous int√©ressant sont donc <code>pad_advanced_background_color</code>, <code>pad_numeric_background_color</code> et <code>pad_operator_background_color</code> qui sont finalement assez bien nomm√©es. Vous remarquerez que les couleurs sont au format #aarrggbb et non pas #rrggbb, donc faites gaffe quand vous tripotez √ßa et que vous remplacez les couleurs par du rose (j'ai choisi le Bubblegum Pink de Pantone mais si vous pr√©f√©rez d'autres teintes de rose, libre √† vous). Il s'agit maintenant de cr√©er un nouveau fichier colors.xml dans notre <a href="https://github.com/skinnyfoetusboy/OMS-template">template OMS</a> qu'on va remplir ainsi :</p>
<pre><code class="hljs language-xml"><span class="php"><span class="hljs-meta">&#x3C;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span><span class="hljs-meta">?></span></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">resources</span>></span>
    <span class="hljs-tag">&#x3C;<span class="hljs-name">color</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pad_advanced_background_color"</span>></span>#fff4cbd4<span class="hljs-tag">&#x3C;/<span class="hljs-name">color</span>></span>
    <span class="hljs-tag">&#x3C;<span class="hljs-name">color</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pad_numeric_background_color"</span>></span>#fff4cbd4<span class="hljs-tag">&#x3C;/<span class="hljs-name">color</span>></span>
    <span class="hljs-tag">&#x3C;<span class="hljs-name">color</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pad_operator_background_color"</span>></span>#fff4cbd4<span class="hljs-tag">&#x3C;/<span class="hljs-name">color</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">resources</span>></span></code></pre>
<p>Puis nous pouvons enfin compiler notre chef d'≈ìuvre (toujours avec apktool) puis l'installer sur notre appareil, non sans l'avoir <a href="https://stackoverflow.com/questions/10930331/how-to-sign-an-already-compiled-apk">au pr√©alable sign√©</a>, puis enfin de l'appliquer via la commande</p>
<pre><code>adb shell cmd overlay enable [le namespace de votre package que vous avez sp√©cifi√© dans AndroidManifest.xml, moi par exemple c'est "com.sfb.pinkcalc"]
</code></pre>
<p>(il faut que votre t√©l√©phone soit en mode D√©veloppeur et que vous tourniez sous Android Oreo minimum sinon √ßa ne marchera pas, pas la peine de me demander pour faire marcher √ßa sur votre t√©l√©phone si vous √™tes sous Gingerbread, tout ce que je ferai ce sera me moquer de vous).</p>
<p>Admirons ce merdier, maintenant.</p>
<figure>
  <img src="fuckthatspink.png" alt="Sans rire, depuis l'√©criture de cet article j'ai pas d√©sactiv√© cet overlay, j'aime vraiment le look que √ßa donne √† l'app calculatrice" />
  <figcaption>Absolument splendide.</figcaption>
</figure>
<p>C'est √† peu pr√®s tout pour l'OMS, pour les bases du moins, n'h√©sitez surtout pas √† d√©compiler toutes les apps que vous trouvez pour voir un peu comment √ßa marche √† l'int√©rieur, c'est aussi pour √ßa que c'est cool Android. Allez faire vos propres trucs moches maintenant.
<em>Ciao.</em></p>
]]></description><link>http://putaindecode.io/fr/articles/android/overlaymanagerservice/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/android/overlaymanagerservice/</guid><pubDate>Thu, 02 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Se lancer dans le TDD]]></title><description><![CDATA[<h2 id="introduction"><a href="#introduction" class="phenomic-HeadingAnchor">#</a>Introduction</h2>
<p>Tout commence en octobre 1999 lorsque <a href="https://fr.wikipedia.org/wiki/Kent_Beck">Kent Beck</a>
pr√©sente une nouvelle m√©thode de programmation agile : l'eXtreme Programmming abr√©g√© <em>XP</em>.<br>
l'<em>XP</em> d√©finit des pratiques de d√©veloppement optimis√©es qui am√©liorent la production et
la robustesse du code.<br>
Parmi les principes les plus connus de sa m√©thode on pourra citer <strong>l'int√©gration continue</strong>
aussi appel√©e <em>CI</em> pour <em>Continuous Integration</em> et <strong>la programmation en bin√¥me</strong>
ou <em>pair programming</em> en anglais.</p>
<p>L'aspect qui nous int√©resse ici est un autre pilier de la m√©thode qui consiste √† piloter
le d√©veloppement par les tests alias <em>TDD</em>.</p>
<p>Le TDD est une pratique controvers√©e car co√ªteuse √† mettre en place.
Popularis√©e par les d√©veloppeurs elle peine √† √©merger.</p>
<p>Avec la multiplication des environnements d'execution, la complexit√© des applications web
et l'essor des projets Open-source, les d√©veloppeurs se heurtent √† des probl√®mes de
compatibilit√©s crois√©es et d'inconsistances.<br>
Aujourd‚Äôhui les standards sont de plus en plus permissifs et favorisent
ainsi les comportements √† risque. La plupart du temps, les syst√®mes sont capables de
corriger vos erreurs, des fois sans m√™me vous en avertir.</p>
<p>Dans ce contexte :</p>
<ul>
<li>Comment √©crire un code multi-plateforme fonctionnel ?</li>
<li>Comment √™tre s√ªr que les ajouts ne cassent pas le code plus ancien ?</li>
<li>Comment √™tre s√ªr que le code se comporte comme voulu ?</li>
</ul>
<p>Commencer par vous imposer des pratiques de d√©veloppement rigoureuses est imp√©ratif
mais les tests seront un compl√©ment indispensable √† la qualit√© de votre code.</p>
<p>Heureusement, le TDD apporte alors une r√©ponse √©l√©gante √† l'ensemble de ces probl√©matiques.</p>
<h2 id="tdd-vous-avez-dit-tdd-"><a href="#tdd-vous-avez-dit-tdd-" class="phenomic-HeadingAnchor">#</a>TDD, vous avez dit TDD ?</h2>
<p>Le Test Driven Development <em>(D√©veloppement Dirig√© par les Tests)</em>,
est une technique de d√©veloppement qui impose l‚Äô√©criture de tests
avant m√™me l‚Äô√©criture de la premi√®re ligne de code.</p>
<p>Dans la th√©orie, la m√©thode requiert l‚Äôintervention d‚Äôau moins
deux intervenants diff√©rents, une personne √©crit les tests, l‚Äôautre
le code test√©. Cela permet d‚Äô√©viter les probl√®mes li√©s √† la subjectivit√©.</p>
<p>Dans la pratique les choses sont plus compliqu√©es,
parfois on d√©veloppe seul ou on √©crit soi-m√™me les tests qui
garantissent l‚Äôint√©grit√© d'une nouvelle fonctionnalit√© dans un projet collaboratif.</p>
<blockquote>
<p>Quoi qu‚Äôil arrive, un test peu efficace vaudra toujours mieux que pas de test du tout.
Le but √©tant de prendre l‚Äôhabitude d‚Äôen √©crire et d‚Äô√™tre objectif dans leur r√©daction.</p>
</blockquote>
<p>Le TDD tend √† se d√©mocratiser et requiert l‚Äôeffort de chacun pour devenir un standard.
Tout d√©veloppeur soucieux de son environnement et de son h√©ritage doit se poser s√©rieusement
la question.<br>
Les frameworks de tests, les guides et les documentations sur le sujet fleurissent,
vous pouvez donc vous lancer sans crainte.</p>
<p>On peut d√©couper le TDD en 5 √©tapes distinctes :</p>
<ol>
<li>√âcrire un test,</li>
<li>V√©rifier qu‚Äôil √©choue,</li>
<li>√âcrire le code <strong>suffisant</strong> pour que le test passe,</li>
<li>V√©rifier que le test passe,</li>
<li>Optimiser le code et v√©rifier qu‚Äôil n‚Äôy ait pas de r√©gression.</li>
</ol>
<p>Pour simplifier cette logique on peut regrouper ces cinq √©tapes en trois grandes id√©es :</p>
<ul>
<li><strong>Tester d‚Äôabord</strong>, qui correspond aux deux premi√®res √©tapes.</li>
<li><strong>Rendre fonctionnel</strong>, qui englobe les points 3 et 4.</li>
<li><strong>Rendre meilleur</strong>, qui n‚Äôest autre que l‚Äô√©tape 5.</li>
</ul>
<p>Bill Wake d√©finit ainsi la m√©thode <a href="http://xp123.com/articles/3a-arrange-act-assert/">3A</a>,
pour Arrange, Act, Assert <em>(Arranger, Agir, Affirmer)</em>.<br>
Il insiste sur le fait que la m√©thode ne d√©finit pas un ordre immuable,
l‚Äô<em>affirmation</em> peut ainsi venir avant l‚Äô<em>action</em>, etc...</p>
<ul>
<li><strong>Arranger</strong> : Phase de pr√©paration de l‚Äôenvironnement de test dans laquelle
on d√©clare les variables et les fonctions.</li>
<li><strong>Agir</strong> : Phase qui met √† l‚Äô√©preuve notre environnement en lui faisant subir des mutations.</li>
<li><strong>Affirmer</strong> : On formule des attentes √† propos de l'environnement
(variables, fonctions, param√®tres).</li>
</ul>
<h2 id="tdd--concepts-de-base"><a href="#tdd--concepts-de-base" class="phenomic-HeadingAnchor">#</a>TDD : concepts de base</h2>
<p>Pour la s√©rie de tests suivante on utilisera EcmaScript 6 et la m√©thode
<a href="https://developer.mozilla.org/fr/docs/Web/API/Console/assert"><code>.assert()</code></a>
de la console navigateur: Vous pourrez ainsi reproduire ces tests vous-m√™me.</p>
<p>Objectif : Ecrire une fonction <code>countWords()</code> qui compte les mots d'une phrase.</p>
<p><strong>ITERATION 1</strong> : √©criture et √©chec du test initial</p>
<p>On √©crit tout d'abord une affirmation de base.</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">''</span>) === <span class="hljs-number">0</span>, <span class="hljs-string">'test 0: le texte ne contient aucun mot'</span>);</code></pre>
<blockquote>
<p><code>Uncaught ReferenceError: countWords is not defined</code></p>
</blockquote>
<p>Apr√®s ex√©cution la console rejette le test.
On doit d'abord d√©finir <code>countWords()</code>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> countWords = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {};
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">''</span>) === <span class="hljs-number">0</span>, <span class="hljs-string">'test 0: le texte ne contient aucun mot'</span>);</code></pre>
<blockquote>
<p><code>Assertion failed: test 0: le texte ne contient aucun mot</code></p>
</blockquote>
<p><code>countWords()</code> est d√©finie et le test √©choue mais l'erreur a chang√©.<br>
Il faut √† pr√©sent d√©finir la logique du c≈ìur de notre fonction.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> countWords = <span class="hljs-function"><span class="hljs-params">text</span> =></span> text || <span class="hljs-number">0</span>;
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">''</span>) === <span class="hljs-number">0</span>, <span class="hljs-string">'test 0: le texte ne contient aucun mot'</span>);</code></pre>
<blockquote>
<p><code>undefined</code></p>
</blockquote>
<p>La console ne renvoie rien, le test est donc pass√©.  </p>
<blockquote>
<p><code>countWords()</code> √©tant tr√®s simple nous omettrons les phases d'optimisation.
On peut aussi consid√©rer les it√©rations suivantes comme des optimisations.</p>
</blockquote>
<p><strong>ITERATION 2</strong> : test pour les phrases d'un seul mot</p>
<p>Tr√®s bien. Essayons √† pr√©sent une phrase d'un seul mot.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> countWords = <span class="hljs-function"><span class="hljs-params">text</span> =></span> text || <span class="hljs-number">0</span>;
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">''</span>) === <span class="hljs-number">0</span>, <span class="hljs-string">'test 0: le texte ne contient aucun mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'nope'</span>) === <span class="hljs-number">1</span>, <span class="hljs-string">'test 1: le texte contient 1 mot'</span>);</code></pre>
<blockquote>
<p><code>Assertion failed: test 1: le texte contient 1 mot</code></p>
</blockquote>
<p><code>countWords()</code> ne compte pas correctement, ajoutons le code suffisant pour passer le test.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> countWords = <span class="hljs-function"><span class="hljs-params">text</span> =></span> text ? text.split(<span class="hljs-string">' '</span>).length : <span class="hljs-number">0</span>;
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">''</span>) === <span class="hljs-number">0</span>, <span class="hljs-string">'test 0: le texte ne contient aucun mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'nope'</span>) === <span class="hljs-number">1</span>, <span class="hljs-string">'test 1: le texte contient 1 mot'</span>);</code></pre>
<blockquote>
<p><code>undefined</code></p>
</blockquote>
<p>Le test est pass√©, ajoutons un autre cas standard.</p>
<p><strong>ITERATION 3</strong> : test pour les phrases de plusieurs mots</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> countWords = <span class="hljs-function"><span class="hljs-params">text</span> =></span> text ? text.split(<span class="hljs-string">' '</span>).length : <span class="hljs-number">0</span>;
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">''</span>) === <span class="hljs-number">0</span>, <span class="hljs-string">'test 0: le texte ne contient aucun mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'nope'</span>) === <span class="hljs-number">1</span>, <span class="hljs-string">'test 1: le texte contient 1 mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'tdd is so fun'</span>) === <span class="hljs-number">4</span>, <span class="hljs-string">'test 2: le texte contient 4 mots'</span>);</code></pre>
<blockquote>
<p><code>undefined</code></p>
</blockquote>
<p>Le nouveau test passe sans modification, on peut continuer.</p>
<p><strong>ITERATION 4</strong> : test pour les phrases contenant des espaces au d√©but et √† la fin</p>
<p>V√©rifions √† pr√©sent la robustesse de la fonction.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> countWords = <span class="hljs-function"><span class="hljs-params">text</span> =></span> text ? text.split(<span class="hljs-string">' '</span>).length : <span class="hljs-number">0</span>;
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">''</span>) === <span class="hljs-number">0</span>, <span class="hljs-string">'test 0: le texte ne contient aucun mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'nope'</span>) === <span class="hljs-number">1</span>, <span class="hljs-string">'test 1: le texte contient 1 mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'tdd is so fun'</span>) === <span class="hljs-number">4</span>, <span class="hljs-string">'test 2: le texte contient 4 mots'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">' so is skateboarding '</span>) === <span class="hljs-number">3</span>, <span class="hljs-string">'test 3: le texte contient 3 mots'</span>);</code></pre>
<blockquote>
<p><code>Assertion failed: test 3: le texte contient 3 mots</code></p>
</blockquote>
<p>A√Øe‚Ä¶ notre fonction n'est pas assez solide. Corrigeons-la pour capter ce nouveau cas en supprimant les
espaces inutiles avant et apr√®s le texte.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> countWords = <span class="hljs-function"><span class="hljs-params">text</span> =></span> text ? text.trim().split(<span class="hljs-string">' '</span>).length : <span class="hljs-number">0</span>;
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">''</span>) === <span class="hljs-number">0</span>, <span class="hljs-string">'test 0: le texte ne contient aucun mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'nope'</span>) === <span class="hljs-number">1</span>, <span class="hljs-string">'test 1: le texte contient 1 mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'tdd is so fun'</span>) === <span class="hljs-number">4</span>, <span class="hljs-string">'test 2: le texte contient 4 mots'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">' so is skateboarding '</span>) === <span class="hljs-number">3</span>, <span class="hljs-string">'test 3: le texte contient 3 mots'</span>);</code></pre>
<blockquote>
<p><code>undefined</code></p>
</blockquote>
<p>Parfait, La fonction est am√©lior√©e ! Ajoutons quand m√™me un dernier test pour √™tre sur.</p>
<p><strong>ITERATION 5</strong> : test pour les phrases contenant un nombre in√©gal d'espaces entre les mots</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> countWords = <span class="hljs-function"><span class="hljs-params">text</span> =></span> text ? text.trim().split(<span class="hljs-string">' '</span>).length : <span class="hljs-number">0</span>;
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">''</span>) === <span class="hljs-number">0</span>, <span class="hljs-string">'test 0: le texte ne contient aucun mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'nope'</span>) === <span class="hljs-number">1</span>, <span class="hljs-string">'test 1: le texte contient 1 mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'tdd is so fun'</span>) === <span class="hljs-number">4</span>, <span class="hljs-string">'test 2: le texte contient 4 mots'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">' so is skateboarding '</span>) === <span class="hljs-number">3</span>, <span class="hljs-string">'test 3: le texte contient 3 mots'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">`  I'm 28, I love $#@! and    multi-spaces  `</span>) === <span class="hljs-number">7</span>, <span class="hljs-string">'test 4: le texte contient 7 mots'</span>);</code></pre>
<blockquote>
<p><code>Assertion failed: test 4: le texte contient 7 mots</code></p>
</blockquote>
<p>Et mince‚Ä¶ Encore un cas particulier, modifions l'algorithme en cons√©quence.
On doit ici retirer les espaces inutiles entre les mots.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> countWords = <span class="hljs-function"><span class="hljs-params">text</span> =></span> text ? text.trim().replace(<span class="hljs-regexp">/\s+/g</span>, <span class="hljs-string">' '</span>).split(<span class="hljs-string">' '</span>).length : <span class="hljs-number">0</span>;
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">''</span>) === <span class="hljs-number">0</span>, <span class="hljs-string">'test 0: le texte ne contient aucun mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'nope'</span>) === <span class="hljs-number">1</span>, <span class="hljs-string">'test 1: le texte contient 1 mot'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">'tdd is so fun'</span>) === <span class="hljs-number">4</span>, <span class="hljs-string">'test 2: le texte contient 4 mots'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">' so is skateboarding '</span>) === <span class="hljs-number">3</span>, <span class="hljs-string">'test 3: le texte contient 3 mots'</span>);
<span class="hljs-built_in">console</span>.assert(countWords(<span class="hljs-string">`  I'm 28, I love $#@! and    multi-spaces  `</span>) === <span class="hljs-number">7</span>, <span class="hljs-string">'test 4: le texte contient 7 mots'</span>);</code></pre>
<blockquote>
<p><code>undefined</code></p>
</blockquote>
<p>Le test final est pass√© sans que les pr√©c√©dents n'√©chouent.</p>
<p>On notera que l'√©criture de tests est un processus it√©ratif.<br>
La phase d'optimisation implique l'√©criture d'un nouveau test qui √©choue
et relance donc une nouvelle it√©ration.</p>
<p>Evidemment <code>countWords()</code> est tr√®s largement sous-optimis√©e et ne couvre pas tous les cas sp√©ciaux.
On aurait pu ajouter une v√©rification sur le param√®tre <code>text</code> et compter avec une expression r√©guli√®re comme ceci :</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> countWords = <span class="hljs-function"><span class="hljs-params">text</span> =></span> <span class="hljs-keyword">typeof</span> text === <span class="hljs-string">'string'</span> &#x26;&#x26; text.trim() ? text.match(<span class="hljs-regexp">/\S+\s{0,1}/g</span>).length : <span class="hljs-number">0</span>;</code></pre>
<p>L'id√©e ici est que coder est un processus incr√©mental et que chaque nouveau cycle doit √™tre initi√©
par un besoin sp√©cifique d√©fini par un test d√©di√©.  </p>
<p>L'√©criture des tests est simple : on d√©compose notre script en une suite d'affirmations
correspondant chacune √† une fonctionnalit√© pr√©cise de notre algorithme.</p>
<p>Gr√¢ce √† ce processus on √©vite :</p>
<ul>
<li><strong>les r√©gressions</strong>: la suite valide de tests est la garantie que le code reste
fonctionnel malgr√© les √©volutions de l'algorithme.</li>
<li><strong>le code mort</strong>: chaque morceau de code √©crit est test√© et a son utilit√©.</li>
<li><strong>le code non document√©</strong>: chaque comportement est d√©crit de mani√®re fonctionnelle.</li>
</ul>
<h2 id="bdd--des-tests-pour-tous"><a href="#bdd--des-tests-pour-tous" class="phenomic-HeadingAnchor">#</a>BDD : Des tests pour tous</h2>
<p>Une variante plus agnostique de la logique du d√©veloppeur existe et permet √† des
intervenants externes de faire partie int√©grante du processus cr√©atif.</p>
<p>le BDD, Behaviour Driven Development (D√©veloppement Dirig√© par le Comportement),
permet de d√©finir de mani√®re compr√©hensible pour tous les intervenants les
sp√©cifications d‚Äôune fonctionnalit√©. Cela permet aussi aux d√©veloppeurs de comprendre
le comportement g√©n√©ral sans √©voquer les d√©tails techniques.
La discussion est donc facilit√©e entre les diff√©rents acteurs.  </p>
<p>Pour illustrer cette variante adaptons l'exemple pr√©c√©dent :</p>
<blockquote>
<p>Note : Pour ex√©cuter ce type de code vous aurez besoin d'un <em>test-runner</em> comme
<a href="https://facebook.github.io/jest/">Jest</a>, <a href="https://mochajs.org">Mocha</a> ou <a href="https://karma-runner.github.io">Karma</a>.</p>
</blockquote>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> countWords = <span class="hljs-function"><span class="hljs-params">text</span> =></span> text ? text.trim().replace(<span class="hljs-regexp">/\s+/g</span>, <span class="hljs-string">' '</span>).split(<span class="hljs-string">' '</span>).length : <span class="hljs-number">0</span>;

describe(<span class="hljs-string">'countWords()'</span>, () => {
  it(<span class="hljs-string">'doit traiter un texte vide'</span>, () => {
    expect(countWords(<span class="hljs-string">''</span>)).toBe(<span class="hljs-number">0</span>);
  });

  it(<span class="hljs-string">'doit traiter un texte d\'un seul mot'</span>, () => {
    expect(countWords(<span class="hljs-string">'nope'</span>)).toBe(<span class="hljs-number">1</span>);
  });

  it(<span class="hljs-string">'doit traiter un texte de n mots'</span>, () => {
    expect(countWords(<span class="hljs-string">'tdd is so fun'</span>)).toBe(<span class="hljs-number">4</span>);
  });

  it(<span class="hljs-string">'doit traiter un texte avec des espaces aux extr√©mit√©s'</span>, () => {
    expect(countWords(<span class="hljs-string">' so is skateboarding '</span>)).toBe(<span class="hljs-number">3</span>);
  });

  it(<span class="hljs-string">'doit traiter un texte avec des espaces in√©gaux entre les mots'</span>, () => {
    expect(countWords(<span class="hljs-string">`  I'm 28, I love $#@! and    multi-spaces  `</span>)).toBe(<span class="hljs-number">7</span>);
  });
});</code></pre>
<p>Voici le r√©sultat du run :</p>
<p><img src="./testrunner.png" alt="r√©sultat du run de tests"></p>
<p>La relecture est simplifi√©e pour tous les participants non techniques.</p>
<h2 id="conclusion"><a href="#conclusion" class="phenomic-HeadingAnchor">#</a>Conclusion</h2>
<p>Le TDD est destin√© √† √™tre incorpor√© √† un processus d'<a href="http://putaindecode.io/fr/articles/ci/">Int√©gration Continue</a>
pour s'assurer du bon fonctionnement de l'application sur tous les environnements
de production apr√®s chaque nouveau <code>commit</code>.  </p>
<p>J'esp√®re vous avez appr√©ci√© la d√©mo et que √ßa vous a donn√© envie de
tester le TDD pour apporter √©quilibre et harmonie √† votre code.  </p>
<p>Dans tous les cas, je peux vous certifier que les autres codeurs vous
en seront reconnaissants, croyez-moi.</p>
]]></description><link>http://putaindecode.io/fr/articles/tdd/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/tdd/</guid><pubDate>Tue, 31 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Swift - la fonction: une closure particuli√®re]]></title><description><![CDATA[<p><strong>Swift</strong> est un langage simple pour les d√©butants, tout en offrant de grandes possibilit√©es aux d√©veloppeurs exp√©riment√©s. Les <em>fonctions</em> Swift sont un bon exemple de cette fa√ßon d‚Äôavoir pens√© le langage.</p>
<h2 id="les-fonctions"><a href="#les-fonctions" class="phenomic-HeadingAnchor">#</a>Les fonctions</h2>
<h3 id="d√©claration-simple"><a href="#d%C3%A9claration-simple" class="phenomic-HeadingAnchor">#</a>D√©claration simple</h3>
<p>La d√©claration et l‚Äôutilisation de <em>fonctions</em> est simple. On commence avec le mot cl√© <code>func</code> suivi du <em>nom</em>, puis des <em>param√®tres</em> entre parenth√®ses (a.k.a. <code>input</code>) :</p>
<pre><code class="hljs language-swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayHello</span><span class="hljs-params">(name:String, age:UInt)</span></span>{
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello <span class="hljs-subst">\(name)</span>, you are <span class="hljs-subst">\(age)</span>"</span>)
}</code></pre>
<p>L‚Äôappel se fait aussi simplement que √ßa : <code>sayHello(name:"Bob", age: 32)</code>. Le mot cl√© <code>_</code> permet d'enlever le label du param√®tre dans l'appel si besoin :</p>
<pre><code class="hljs language-swift"><span class="hljs-comment">// Declaration</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayHello</span><span class="hljs-params">(name:String,<span class="hljs-number">_</span> age:UInt)</span></span>{
 <span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello <span class="hljs-subst">\(name)</span>, you are <span class="hljs-subst">\(age)</span>"</span>)
}
<span class="hljs-comment">// Appel</span>
sayHello(name:<span class="hljs-string">"Bob"</span>, <span class="hljs-number">32</span>)</code></pre>
<p>Mais vous perdrez en clart√© de code suivant les cas. Par exemple, avec <code>min(3,6)</code> on voit tout de suite ce que fait la fonction. Alors que <code>sayHelloTo("Bob", 32)</code>, le <code>32</code> pourrait √™tre beaucoup de choses.</p>
<blockquote>
<p>Les param√®tres sont obligatoirement typ√©s, mais peuvent √™tre optionnels (en autorisant la valeur nil) avec la notation ? (e.g. Int?, String?).</p>
</blockquote>
<p>Vous pouvez aussi d√©finir des valeurs par d√©fauts pour les param√®tres :</p>
<pre><code class="hljs language-swift"><span class="hljs-comment">// Declaration</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayHello</span><span class="hljs-params">(name:String, <span class="hljs-number">_</span> age:UInt? = <span class="hljs-literal">nil</span>)</span></span>{
    <span class="hljs-keyword">if</span> age == <span class="hljs-literal">nil</span> {
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello <span class="hljs-subst">\(name)</span>"</span>)
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello <span class="hljs-subst">\(name)</span>, you are <span class="hljs-subst">\(age!)</span>"</span>) <span class="hljs-comment">//! permet de pas afficher Optinal(value)</span>
    }
}
<span class="hljs-comment">// Appel</span>
sayHello(name:<span class="hljs-string">"Bob"</span>) <span class="hljs-comment">// -> Hello Bob</span>
sayHello(name:<span class="hljs-string">"Bob"</span>, <span class="hljs-number">32</span>) <span class="hljs-comment">// ->  Hello Bob, you are 32</span></code></pre>
<p>La plupart du temps nos fonctions servent √† nous retourner des informations. Pour cela on utilise <code>-></code> en signe de retour suivi du type de la valeur retourn√©e.</p>
<pre><code>func formatHelloSentence(name:String, age:UInt? = nil) -> String {
    if age == nil {
        return "Hello \(name)"
    } else {
        return "Hello \(name), you are \(age)"
    }
}
// Appel
let helloSentence = formatHelloSentence(name:"Bob", age: 32)
</code></pre>
<h3 id="retours-multiples-ou-tuples"><a href="#retours-multiples-ou-tuples" class="phenomic-HeadingAnchor">#</a>Retours multiples ou Tuples</h3>
<p>Apple n‚Äôest pas connu pour sa g√©n√©rosit√©, mais dans Swift ils en ont fait autrement <code>:troll:</code> : on peut retourner plusieurs valeurs avec une seule fonction. Pour cela on utilise un <code>Tuple</code> : un collection de variables ordonn√©es.</p>
<pre><code class="hljs language-swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hardFunction</span><span class="hljs-params">(fInputs:[Float])</span></span>->(<span class="hljs-type">Int</span>,<span class="hljs-type">Int</span>,<span class="hljs-type">Float</span>,<span class="hljs-type">String</span>) {    
    <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>
    <span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span>
    <span class="hljs-keyword">var</span> f : <span class="hljs-type">Float</span> = <span class="hljs-number">0.0</span>
    <span class="hljs-keyword">var</span> str = <span class="hljs-string">""</span>
    <span class="hljs-comment">//...</span>
    <span class="hljs-keyword">return</span> (a,b,f,str)
}</code></pre>
<p>Ici cette fonction prend en param√®tres un tableau de <code>Float</code> et retourne un <em>Tuple</em> compos√© de deux <code>Int</code>, un <code>Float</code> et un <code>String</code> dans cet ordre. Vous pouvez alors utiliser le <em>Tuple</em> comme une structure en utilisant l‚Äôindex des √©l√©ments du <em>Tuple</em> comme nom de variable (ex: <code>0</code>pour le premier <code>Int</code>, <code>3</code> pour le <code>String</code>).</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> myTuple = hardFunction([<span class="hljs-number">2.4</span>,<span class="hljs-number">2.6</span>,<span class="hljs-number">1.8</span>])
<span class="hljs-keyword">let</span> myTupleString = myTuple.<span class="hljs-number">3</span></code></pre>
<p>Mais ceci reste assez confus, alors on peut nommer les √©l√©ments.</p>
<pre><code class="hljs language-swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hardFunction</span><span class="hljs-params">(fInputs:[Float])</span></span>->(valSup:<span class="hljs-type">Int</span>,
        valMax:<span class="hljs-type">Int</span>,
        average:<span class="hljs-type">Float</span>,
        errorString:<span class="hljs-type">String</span>) {
    <span class="hljs-comment">//...</span>
}

<span class="hljs-comment">//utilisation</span>
<span class="hljs-keyword">let</span> myTuple = hardFunction([<span class="hljs-number">2.4</span>,<span class="hljs-number">2.6</span>,<span class="hljs-number">1.8</span>])
<span class="hljs-keyword">let</span> myTupleString = myTuple.errorString <span class="hljs-comment">// myTuple.3 marche encore</span></code></pre>
<p>L'ex√©cution du code permettant d'avoir les valeurs <em>Tuple</em> n'est effectu√©e qu'√† la demande de ces valeurs. Dans l'exemple ci-dessus, le code de <code>hardFunction</code> ne sera appel√© qu'√† la derni√®re ligne, car c'est l√† qu'on a besoin de <code>errorString</code>, pas avant.</p>
<p> Et la notion de <em>Closure</em> fait son entr√©e!</p>
<h2 id="la-closure-la-variable-fonction"><a href="#la-closure-la-variable-fonction" class="phenomic-HeadingAnchor">#</a>La closure: la variable-fonction</h2>
<h3 id="qu√©saco"><a href="#qu%C3%A9saco" class="phenomic-HeadingAnchor">#</a>Qu√©saco</h3>
<p><strong>Une <em>closure</em> est une partie de code, avec param√®tres et sorties, qui peut √™tre encapsul√© dans une variable, et ex√©cut√©e √† la demande</strong>. Si vous d√©veloppez en C++ ou Objective-C vous connaissez peut-√™tre d√©j√† les <em>blocks</em> et en Java ou C# les <em>lambdas</em> qui sont des <em>features</em> tr√®s (tr√®s) proches.</p>
<h3 id="d√©claration"><a href="#d%C3%A9claration" class="phenomic-HeadingAnchor">#</a>D√©claration</h3>
<p>Une <em>closure</em>  se d√©clare gr√¢ce au <code>{}</code> et peut √™tre appel√©e (ex√©cut√©e) gr√¢ce aux parenth√®ses :</p>
<pre><code class="hljs language-swift"> <span class="hljs-keyword">let</span> helloClosure = {
     <span class="hljs-built_in">print</span>(<span class="hljs-string">"hello, I‚Äôm a closure"</span>)
 }

 helloClosure() <span class="hljs-comment">// Le code est ex√©cut√© ici</span></code></pre>
<p>√áa vous rappelle rien ? L‚Äôappel d‚Äôune <em>fonction</em> ! En r√©alit√©, la <em>fonction</em> est une <em>closure</em> particuli√®re associ√© √† un contexte (Object, environnement, Bundle...) pour r√©aliser des optimisations et une meilleur compr√©hension du code.</p>
<blockquote>
<p>Pour une <em>closure</em> "√† l‚Äôair libre", on dit d‚Äôelle, qu‚Äôelle est <em>Self Contained</em> alors qu‚Äôune fonction est contenue par un contexte (<code>class</code> par exemple)</p>
</blockquote>
<p>Comme les fonctions, les <em>closures</em>  ont des param√®tres d‚Äôentr√©e et de retour:  </p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> complexClosure = {(name:<span class="hljs-type">String</span>, age:<span class="hljs-type">Float</span>) -> <span class="hljs-type">Bool</span> <span class="hljs-keyword">in</span>
    <span class="hljs-comment">// Code</span>
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
}
<span class="hljs-keyword">let</span> success = complexClosure(<span class="hljs-string">"Louis"</span>,<span class="hljs-number">32</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-string">"Louis has <span class="hljs-subst">\(success)</span>"</span>)</code></pre>
<p>Ainsi, les valeurs dans la premi√®re partie apr√®s la <code>{</code> sont les param√®tres d‚Äôentr√©es et apr√®s la <code>-></code> ce sont les param√®tres de sortie. Le code √† ex√©cuter est apr√®s le <code>in</code>.</p>
<blockquote>
<p>Comme vous avez d√ª le remarquer, les <em>closures</em> n‚Äôont pas de param√®tres nominatif. IL faut passer les param√®tres d'entr√©e dans l'ordre de la d√©claration.</p>
</blockquote>
<h3 id="closure-et-type"><a href="#closure-et-type" class="phenomic-HeadingAnchor">#</a>Closure et Type</h3>
<p>Toute variable est typ√©e en <em>Swift</em>, implicitement ou explicitement. Pour les <em>closures</em> le type est souvent implicite, aussi bien qu‚Äôon en oublie souvent qu‚Äôelles sont typ√©es. Le type d‚Äôune closure va √™tre d√©fini par ses param√®tres d‚Äôentr√©e et de sortie. Ainsi la <em>complexClosure</em>  ci-dessus est du type : <code>((String, Float)) -> (Bool)</code>.</p>
<p>Je peux alors √©crire ce code puisque les closures sont du m√™me type :</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> otherComplexClosure = { (surname:<span class="hljs-type">String</span>,size:<span class="hljs-type">Float</span>) -> <span class="hljs-type">Bool</span> <span class="hljs-keyword">in</span>
    <span class="hljs-comment">// Other complexe Code</span>
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
}
complexClosure = otherComplexClosure</code></pre>
<h3 id="utilisation-du-contexte"><a href="#utilisation-du-contexte" class="phenomic-HeadingAnchor">#</a>Utilisation du contexte</h3>
<p>Les <em>closures</em> ont une connaissance du contexte qui l‚Äôentoure. Ce qui veut dire que si la closure est cr√©√© dans une m√©thode, elle aura acc√®s :</p>
<ul>
<li>au contexte de classe en passant par <code>self</code> (variables, autre fonctions...)</li>
<li>au contexte de la fonction (param√®tres, fonctions internes...)</li>
</ul>
<pre><code class="hljs language-swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
    <span class="hljs-keyword">var</span> name = <span class="hljs-string">"Boby"</span>

    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">crier</span><span class="hljs-params">(cri:String)</span></span>{
        <span class="hljs-keyword">let</span> uselessClosure = {
            <span class="hljs-built_in">print</span>(<span class="hljs-string">"<span class="hljs-subst">\(<span class="hljs-keyword">self</span>.name)</span> cri <span class="hljs-subst">\(cri)</span>"</span>)
        }
        uselessClosure()
    }
}</code></pre>
<h3 id="trailing-closure"><a href="#trailing-closure" class="phenomic-HeadingAnchor">#</a>Trailing Closure</h3>
<p>Pour finir, un peu d'esth√©tisme car on aime tous le <em>beau</em> code. La <em>Trailing Closure</em> est une syntaxe d'appel de fonction qui permet de rendre le code plus facile √† lire.</p>
<p>Prenant la fonction suivante, prenant une <code>URL</code> est une closure de type <code>Void->Void</code> :</p>
<pre><code class="hljs language-swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doLongTask</span><span class="hljs-params">(on file:URL,
        completion:<span class="hljs-params">()</span></span></span> -> ()){
    <span class="hljs-comment">//long task</span>
    completion()
}</code></pre>
<p>On alors l'appeler cette fonction comme ceci :</p>
<pre><code class="hljs language-swift">doLongTask(on: aFileURL, completion:{
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Task Applied on <span class="hljs-subst">\(aFileURL)</span>"</span>)
})</code></pre>
<p>Avec du code plus complexe, √ßa commence √† devenir difficile √† lire. Or si le dernier param√®tre d'une fonction est une <em>closure</em>, on peut alors √©crire l'appel comme ceci :</p>
<pre><code class="hljs language-swift">doLongTask(on: aFileURL){
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Task Applied on <span class="hljs-subst">\(aFileURL)</span>"</span>)
}</code></pre>
<h2 id="pro-tip"><a href="#pro-tip" class="phenomic-HeadingAnchor">#</a>Pro Tip</h2>
<p>Imaginons une classe <code>A</code> ayant une variable <code>event</code>  et un classe <code>B</code> ayant une fonction <code>awesomeEvent</code> ayant le m√™me type que la variable <code>event</code> de la classe <code>A</code>. Je peux alors allouer, √† la variable <code>event</code>, le code de <code>awesomeEvent</code>.</p>
<pre><code class="hljs language-swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>{
    <span class="hljs-keyword">var</span> event : ((<span class="hljs-type">String</span>)-><span class="hljs-type">Void</span>)?
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">awesome</span><span class="hljs-params">(name:String)</span></span>{
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"Awesome <span class="hljs-subst">\(name)</span>"</span>)
    }
}

<span class="hljs-keyword">let</span> b = <span class="hljs-type">B</span>()
<span class="hljs-keyword">let</span> a = <span class="hljs-type">A</span>()

a.event = b.awesome
a.event?(<span class="hljs-string">"Mate"</span>)</code></pre>
<p><a href="http://swift.sandbox.bluemix.net/#/repl/59ecdb8508529b23242b5696">Ex√©cutez ce code sur IBM Swift Sandbox c'est magique!</a></p>
<h2 id="conclusion"><a href="#conclusion" class="phenomic-HeadingAnchor">#</a>Conclusion</h2>
<p>Voil√† vous savez tout, ou presque, sur les fonctions et les closures. Les closures ont vraiment la part belle en Swift, donc apprenez √† les utiliser et les comprendre pour simplifiez votre code. Elles sont partout dans les API iOS et macOS.</p>
<p>Et un petit conseil: faite attention √† l'√©tat de vos <em>closures</em> dans vos <code>Thread</code> si vous ne voulez pas de fuite üòä</p>
]]></description><link>http://putaindecode.io/fr/articles/swift/closure/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/swift/closure/</guid><pubDate>Thu, 26 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction aux pattern des observables]]></title><description><![CDATA[<p>En JavaScript, nous pouvons ex√©cuter du code de mani√®re synchrone (bloquant) ou
asynchrone (non bloquant).</p>
<p>Prenons une fonction <code>logValue</code>, qui prend une valeur et l'affiche dans la
console :</p>
<pre><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logValue</span>(<span class="hljs-params">value</span>) </span>{
  <span class="hljs-built_in">console</span>.log(value);
}</code></pre>
<p>Nous allons passer <code>logValue</code> comme callback √† la m√©thode
<code>Array.prototype.forEach</code>, qui va l'ex√©cuter de mani√®re <strong>synchrone</strong> :</p>
<pre><code class="hljs language-JavaScript"><span class="hljs-keyword">const</span> arrayOfValues = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]

arrayOfValues.forEach(logValue)
<span class="hljs-comment">// Log 1, 2, 3, 4 puis 5</span></code></pre>
<p>On peut √©galement passer <code>logValue</code> comme callback de <code>setTimeout</code>, qui va
l'ex√©cuter de mani√®re <strong>asynchrone</strong> :</p>
<pre><code class="hljs language-JavaScript">setTimeout(logValue, <span class="hljs-number">3000</span>, <span class="hljs-string">"Hello world!"</span>)
logValue(<span class="hljs-string">"How are you?"</span>)
<span class="hljs-comment">// Log "How are you?"</span>
<span class="hljs-comment">// Log "Hello world!" 3 secondes plus tard</span></code></pre>
<p>Une fonction est agnostique: elle peut √™tre appel√©e de mani√®re synchrone ou
asynchrone, c'est la fa√ßon dont elle est ex√©cut√©e qui d√©finira le "mode".</p>
<p>Un cas o√π il est utile d'utiliser des APIs asynchrones avec Node.js: les acc√®s
au <em>file-system</em>. Si vous lisez un gros fichier en mode synchrone, il va bloquer
l'ex√©cution de votre programme tant qu'il n'a pas fini, mieux vaut attendre
qu'il vous l'envoie quand il est pr√™t.</p>
<p>Node.js propose l'API suivante: <code>fs.readFile(fileToRead, options, callback)</code></p>
<pre><code class="hljs language-JavaScript">fs.readFile(<span class="hljs-string">"./alphabet.txt"</span>, {<span class="hljs-attr">encoding</span>: <span class="hljs-string">"utf-8"</span>}, (err, data) => {
  <span class="hljs-keyword">if</span> (err) {
    onError(err)
  } <span class="hljs-keyword">else</span> {
    onData(data)
  }
})</code></pre>
<p>Cet exemple montre une API utilisant un simple callback qui est ex√©cut√© lorsque
<code>readFile</code> a lu le fichier ou √©chou√© √† le faire.</p>
<p>Un autre cas o√π utiliser des APIs asynchrones est particuli√®rement important :
les appels r√©seaux. On ne peut pas se permettre de <em>freeze</em> toute notre
interface pendant que la requ√™te r√©seau tourne.</p>
<pre><code class="hljs language-JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logValue</span>(<span class="hljs-params">value</span>) </span>{ <span class="hljs-built_in">console</span>.log(value) }
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logError</span>(<span class="hljs-params">err</span>) </span>{ <span class="hljs-built_in">console</span>.error(err) }

fetch(<span class="hljs-string">"https://api.github.com/users/wyeo"</span>)
  .then(<span class="hljs-function"><span class="hljs-params">res</span> =></span> res.json())
  .then(logValue) <span class="hljs-comment">// Log le payload JSON lorsque la requ√™te est termin√©e</span>
  .catch(logError) <span class="hljs-comment">// Lance une erreur dans la console si quelque chose s'est mal pass√©</span></code></pre>
<p>Dans cet exemple, l'API renvoie une <code>Promise</code>: <a href="/fr/articles/js/es2015/promises/">une structure repr√©sentant une
valeur potentielle</a>. Lorsque sa valeur est
disponible, la promesse est <em>remplie</em>, et ex√©cutera les callbacks qu'on lui a
pass√© dans <code>.then</code>, si elle constate une erreur, elle ex√©cutera les callbacks
qu'on lui a pass√© dans <code>.catch</code>.</p>
<p>Les <code>Promise</code> ne permettent cependant pas de traiter de la donn√©e au fur et √†
mesure de son arriv√©e: elle est remplie une seule fois.</p>
<p>C'est l√† que les <code>Observable</code> arrivent √† la rescousse.</p>
<p>Un <code>Observable</code> est un objet impl√©mentant une m√©thode <code>.subscribe</code> qui prend
comme param√®tre un <code>Observer</code>. Ce dernier a cette forme :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> observer = {
  <span class="hljs-attr">next</span>: <span class="hljs-function"><span class="hljs-params">val</span> =></span> <span class="hljs-built_in">console</span>.log(val), <span class="hljs-comment">// une fonction √† ex√©cuter √† chaque nouvel √©venement</span>
  error: <span class="hljs-function"><span class="hljs-params">err</span> =></span> <span class="hljs-built_in">console</span>.error(err), <span class="hljs-comment">// une fonction √† ex√©cuter en cas d'erreur</span>
  complete: <span class="hljs-function"><span class="hljs-params">()</span> =></span> <span class="hljs-built_in">console</span>.info(<span class="hljs-string">"Complete!"</span>) <span class="hljs-comment">// une fonction √† ex√©cuter lorsque l'observable a fini</span>
};</code></pre>
<p>Impl√©mentons na√Øvement un <code>Observable</code> qui va r√©agir lorsqu'un user va taper sur
son clavier et se consid√©rer termin√© une fois <code>Enter</code> press√©:</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> KeyboardObservable = {
  <span class="hljs-attr">subscribe</span>: <span class="hljs-function"><span class="hljs-params">observer</span> =></span> {
    <span class="hljs-keyword">const</span> handleKeyUp = <span class="hljs-function"><span class="hljs-params">event</span> =></span> {
      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> event.keyCode === <span class="hljs-string">"number"</span>) {
        <span class="hljs-keyword">if</span> (event.keyCode === <span class="hljs-number">13</span> <span class="hljs-comment">/* Enter */</span>) {
          <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">"keyup"</span>, handleKeyUp);
          observer.complete();
        } <span class="hljs-keyword">else</span> {
          observer.next(event.keyCode);
        }
      } <span class="hljs-keyword">else</span> {
        observer.error(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"No keyCode found"</span>));
      }
    };
    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">"keyup"</span>, handleKeyUp);
    <span class="hljs-comment">// subscribe retourne la "soucription", contenant une fonction pour la stopper</span>
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">unsubscribe</span>: <span class="hljs-function"><span class="hljs-params">()</span> =></span> <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">"keyup"</span>, handleKeyUp)
    };
  }
};

<span class="hljs-keyword">let</span> keys = [];
KeyboardObservable.subscribe({
  <span class="hljs-attr">next</span>: <span class="hljs-function"><span class="hljs-params">keyCode</span> =></span> keys.push(<span class="hljs-built_in">String</span>.fromCharCode(keyCode)),
  <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-params">error</span> =></span> <span class="hljs-built_in">console</span>.error(error),
  <span class="hljs-attr">complete</span>: <span class="hljs-function"><span class="hljs-params">()</span> =></span> alert(keys.join(<span class="hljs-string">""</span>))
});</code></pre>
<p>Un <code>Observable</code> fonctionne √† la fois pour du code synchrone et asynchrone, et il
s'agit d'un pattern qui peut s'appliquer √† des cas o√π <code>Promise</code> manque de
granularit√©, puisqu'il permet de traiter la donn√©e au fur et √† mesure de son
arriv√©e. <em>In fine</em>, un observable est un <em>event emitter</em> avec un concept de
completion.</p>
<p>Il existe d'ailleurs un <a href="https://tc39.github.io/proposal-observable/"><em>proposal</em> en stage
1</a> pour en faire une API de la
specification de JavaScript. On peut tr√®s bien imaginer que les observables
deviennent une interface tr√®s r√©pandue dans un futur proche.</p>
<p>Dans les prochains articles, nous verrons pourquoi et comment combiner des
observables ainsi que les cas d'usage au sein d'une application React.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/observable/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/observable/</guid><pubDate>Mon, 23 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Podcast 7: React 16, GraphQL, IDLs, RPCs et mauvaise foi sur l'iPhone X]]></title><description><![CDATA[<p>On se retrouve pour un nouvel √©pisode avec un joli programme: on vous y parle de
React 16, de GraphQL, des IDLs et des RPCs. En plus de √ßa, on vous offre une
belle dose de mauvaise foi dans un d√©bat sur l'iPhone X.</p>
<p>Moi, Matthias (<a href="https://twitter.com/bloodyowl">https://twitter.com/bloodyowl</a>), vous pr√©sente ce podcast en
compagnie de mes fid√®les acolytes :</p>
<ul>
<li>Mathieu (<a href="https://twitter.com/Zoontek">https://twitter.com/Zoontek</a>)</li>
<li>Georges (<a href="https://twitter.com/skinnyfoetusboy">https://twitter.com/skinnyfoetusboy</a>)</li>
</ul>
<p>Les petits liens qui vont bien :</p>
<ul>
<li>React 16: <a href="https://reactjs.org/blog/2017/09/26/react-v16.0.html">https://reactjs.org/blog/2017/09/26/react-v16.0.html</a></li>
<li>GraphQL: <a href="http://graphql.org">http://graphql.org</a></li>
<li>Relay: <a href="https://facebook.github.io/relay/">https://facebook.github.io/relay/</a></li>
<li>Apollo: <a href="https://www.apollodata.com">https://www.apollodata.com</a></li>
<li>ProtoBuf: <a href="https://github.com/google/protobuf">https://github.com/google/protobuf</a></li>
<li>Thrift: <a href="https://thrift.apache.org">https://thrift.apache.org</a></li>
<li>gRPC: <a href="https://grpc.io">https://grpc.io</a></li>
<li>iPhone X: <a href="https://www.apple.com/iphone-x/">https://www.apple.com/iphone-x/</a></li>
</ul>
<p>La track du g√©n√©rique: <a href="https://soundcloud.com/matthias-le-brun/arrow">https://soundcloud.com/matthias-le-brun/arrow</a></p>
<iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/348401054&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=true&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=false&amp;visual=true"></iframe>
<ul>
<li>Le
<a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de
Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/7/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/7/</guid><pubDate>Wed, 18 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Utiliser Reason avec JavaScript]]></title><description><![CDATA[<p>Dans un <a href="/fr/articles/reason/introduction-reason/">pr√©c√©dent article</a>, on vous
pr√©sentait une nouvelle syntaxe pour OCaml:
<a href="https://reasonml.github.io">ReasonML</a>, elle rend le langage plus accessible en
le rapprochant de JavaScript moderne.</p>
<p>√Ä l'aide du projet
<a href="https://bucklescript.github.io/bucklescript/Manual.html">BuckleScript</a> qui
supporte Reason nativement, on peut compiler notre code Reason vers JavaScript
tr√®s facilement. Le cr√©ateur de BuckleScript utilisait √† l'origine un autre
projet appel√© <a href="http://ocsigen.org/js_of_ocaml/">js_of_ocaml</a>. Trouvant qu'il
serait possible d'optimiser et de rendre plus lisible le code JavaScript en
sortie si le compiler commen√ßait son travail √† une √©tape plus haut niveau (une
repr√©sentation du programme contenant des informations suppl√©mentaires, alors
que js_of_ocaml utilise du bytecode), il propose ce changement √† la team
js_of_ocaml qui refuse, et d√©cide donc de se lancer dans le projet qui deviendra
BuckleScript.</p>
<p>Pour d√©marrer un projet avec BuckleScript et Reason, on ouvre son terminal, et
c'est parti:</p>
<p>On installe BuckleScript:</p>
<pre><code class="hljs language-console"><span class="hljs-meta">$</span><span class="bash"> npm install -g bs-platform</span></code></pre>
<p>On initialise le projet:</p>
<pre><code class="hljs language-console"><span class="hljs-meta">$</span><span class="bash"> bsb -init my-app -theme basic-reason</span></code></pre>
<p>Hop, votre projet est pr√™t dans <code>my-app</code>.</p>
<p>Maintenant la question est: comment est-ce que je peux utiliser du JS dans
Reason et vice-versa ?</p>
<h2 id="les-ffi-ou-foreign-function-interface"><a href="#les-ffi-ou-foreign-function-interface" class="phenomic-HeadingAnchor">#</a>Les FFI (ou Foreign Function Interface)</h2>
<p>OCaml g√®re naturellement les <code>FFI</code>, notamment pour appeler des fonctions <code>C</code>
lorsqu'il compile vers du code natif.</p>
<p>BuckleScript vient les overloader pour les adapter √† JavaScript.</p>
<p>Cr√©ons une FFI pour la fonction <code>alert</code> :</p>
<pre><code class="hljs language-reason">[@bs.<span class="hljs-keyword">val</span>] <span class="hljs-keyword">external</span> alert : <span class="hljs-built_in">string</span> => <span class="hljs-built_in">unit</span> = <span class="hljs-string">""</span>;</code></pre>
<p>On d√©finit:</p>
<ul>
<li>une fonction externe nomm√©e <code>alert</code></li>
<li>qui prend une <code>string</code> et ne retourne <em>rien</em> (ici repr√©sent√© par la valeur
<code>unit</code>)</li>
<li>qui est une valeur √† simplement r√©cup√©rer (<code>[@bs.val]</code>)</li>
</ul>
<p>Si on regarde le code JavaScript en sortie, c'est vide. En effet, <code>external</code> est
un moyen de d√©finir comment acc√©der √† une valeur ainsi que son type. Si en
revanche on utilise la function <code>alert</code> dans le module:</p>
<pre><code class="hljs language-reason">[@bs.<span class="hljs-keyword">val</span>] <span class="hljs-keyword">external</span> alert : <span class="hljs-built_in">string</span> => <span class="hljs-built_in">unit</span> = <span class="hljs-string">""</span>;

alert(<span class="hljs-string">"Hello!"</span>);</code></pre>
<p>On voit dans l'output que BuckleScript a <em>inlin√©</em> l'appel de <code>alert</code>, il n'a pas
cr√©e de repr√©sentation interm√©diaire.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE</span>
<span class="hljs-meta">"use strict"</span>;

alert(<span class="hljs-string">"Hello!"</span>);

<span class="hljs-comment">/*  Not a pure module */</span></code></pre>
<p>Maintenant amusons nous √† cr√©er des bindings pour jQuery, juste pour le fun:</p>
<pre><code class="hljs language-reason">/* <span class="hljs-type">On</span> cr√©e un <span class="hljs-keyword">type</span> opaque pour repr√©senter un objet jQuery */
<span class="hljs-keyword">type</span> jQuery;

/* <span class="hljs-type">On</span> <span class="hljs-keyword">type</span> le <span class="hljs-keyword">module</span> jQuery */
[@bs.<span class="hljs-keyword">module</span>] <span class="hljs-keyword">external</span> jQuery : <span class="hljs-built_in">string</span> => jQuery = <span class="hljs-string">"jquery"</span>;

/* <span class="hljs-type">On</span> <span class="hljs-keyword">type</span> la m√©thod `on`, <span class="hljs-type">BuckleScript</span> peut naturellement typer
  le pattern de chaining, assez commun en <span class="hljs-type">JS</span>, √† l'aide de l'annotation
  `bs.send.pipe: <span class="hljs-keyword">type</span>` */
[@bs.send.pipe: jQuery] <span class="hljs-keyword">external</span> on : <span class="hljs-built_in">string</span> => (<span class="hljs-type">Dom</span>.event => <span class="hljs-built_in">unit</span>) => jQuery = <span class="hljs-string">""</span>;

jQuery(<span class="hljs-string">".selector"</span>)
  |> on(<span class="hljs-string">"click"</span>, (_) => alert(<span class="hljs-string">"hey"</span>));</code></pre>
<p>Ce qui va nous sortir:</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE</span>
<span class="hljs-meta">"use strict"</span>;

<span class="hljs-keyword">var</span> JQuery = <span class="hljs-built_in">require</span>(<span class="hljs-string">"jquery"</span>);

JQuery(<span class="hljs-string">".selector"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  alert(<span class="hljs-string">"hey"</span>);
  <span class="hljs-keyword">return</span> <span class="hljs-comment">/* () */</span> <span class="hljs-number">0</span>;
});

<span class="hljs-comment">/*  Not a pure module */</span></code></pre>
<p>Comme on peut le constater, le code de sortie ressemble beaucoup √† ce qu'on
pourrait √©crire √† la main.</p>
<p>Pour en savoir un peu plus sur les FFI JavaScript:</p>
<ul>
<li><a href="https://bucklescript.github.io/bucklescript/Manual.html">La documentation de
BuckleScript</a></li>
<li><a href="https://github.com/reasonml-community">Les projets de bindings cr√©es par la
communaut√©</a> (ceux nomm√©s
<code>bs-{nom-de-lib-js}</code>)</li>
</ul>
<h2 id="les-objets"><a href="#les-objets" class="phenomic-HeadingAnchor">#</a>Les objets</h2>
<p>On peut directement utiliser des objets JavaScript en Reason. Pour acc√©der √† une
propri√©t√©, on utilise <code>##</code>.</p>
<pre><code class="hljs language-reason"><span class="hljs-meta">myJsObject#</span><span class="bash"><span class="hljs-comment">#property</span></span></code></pre>
<p>√áa d√©panne, mais au sein de notre code Reason, on pr√©f√©rera bien souvent
utiliser des records: ils ont une repr√©sentation plus l√©g√®re et sont par d√©faut
immutables. Pour effectuer une conversion, on proc√®de de la mani√®re suivante:</p>
<pre><code class="hljs language-reason"><span class="hljs-keyword">type</span> jsUser = {
  .
  <span class="hljs-string">"id"</span>: <span class="hljs-built_in">string</span>,
  <span class="hljs-string">"username"</span>: <span class="hljs-built_in">string</span>,
  <span class="hljs-comment">/* valeur pouvant √™tre null, undefined, ou la valeur */</span>
  <span class="hljs-string">"birthdate"</span>: Js.Null_undefined.t(<span class="hljs-built_in">string</span>),
  <span class="hljs-comment">/* "light" ou "dark", les enums sont souvent repr√©sent√©s par des strings en JS */</span>
  <span class="hljs-string">"theme"</span>: <span class="hljs-built_in">string</span>
};

<span class="hljs-comment">/* En Reason, les enums sont repr√©sent√©s par des variants */</span>
<span class="hljs-keyword">type</span> theme =
  | Light
  | Dark;

<span class="hljs-keyword">type</span> user = {
  id: <span class="hljs-built_in">string</span>,
  username: <span class="hljs-built_in">string</span>,
  <span class="hljs-comment">/* pas de null ou undefined, on utilise un type option */</span>
  birthdate: option(<span class="hljs-built_in">string</span>),
  theme
};

<span class="hljs-comment">/* une fonction de transformation JS -> Reason */</span>
<span class="hljs-keyword">let</span> fromJs = <span class="hljs-function">(<span class="hljs-params">jsUser</span>) =></span> {
  id: jsUser##id,
  username: jsUser##username,
  <span class="hljs-comment">/* BuckleScript propose des helpers pour les conversions */</span>
  birthdate: Js.Null_undefined.to_opt(jsUser##birthdate),
  theme:
    <span class="hljs-keyword">switch</span> jsUser##theme {
    | <span class="hljs-string">"dark"</span> => Dark
    | <span class="hljs-string">"light"</span>
    <span class="hljs-comment">/* On match une cha√Æne de caract√®re, le match n'est pas exhaustif,
         on doit donc d√©finir la valeur de fallback (par defaut) √† l'aide
         de `_`
       */</span>
    | _ => Light
    }
};

<span class="hljs-comment">/* Pour cr√©er un objet JS en Reason, il suffit de l'√©crire comme un
     record, mais avec des cl√©s entre quotes, comme du JSON.
   */</span>
<span class="hljs-keyword">let</span> toJs = <span class="hljs-function">(<span class="hljs-params">user</span>) =></span> {
  <span class="hljs-string">"id"</span>: user.id,
  <span class="hljs-string">"username"</span>: user.username,
  <span class="hljs-string">"birthdate"</span>: Js.Null_undefined.from_opt(user.birthdate),
  <span class="hljs-string">"theme"</span>:
    <span class="hljs-keyword">switch</span> user.theme {
    | <span class="hljs-function"><span class="hljs-params">Light</span> =></span> <span class="hljs-string">"light"</span>
    | <span class="hljs-function"><span class="hljs-params">Dark</span> =></span> <span class="hljs-string">"dark"</span>
    }
};</code></pre>
<p>Le code en sortie:</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE</span>
<span class="hljs-meta">"use strict"</span>;

<span class="hljs-keyword">var</span> Js_primitive = <span class="hljs-built_in">require</span>(<span class="hljs-string">"bs-platform/lib/js/js_primitive.js"</span>);
<span class="hljs-keyword">var</span> Js_null_undefined = <span class="hljs-built_in">require</span>(<span class="hljs-string">"bs-platform/lib/js/js_null_undefined.js"</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fromJs</span>(<span class="hljs-params">jsUser</span>) </span>{
  <span class="hljs-keyword">var</span> match = jsUser.theme;
  <span class="hljs-keyword">var</span> tmp;
  <span class="hljs-keyword">switch</span> (match) {
    <span class="hljs-keyword">case</span> <span class="hljs-string">"dark"</span>:
      tmp = <span class="hljs-comment">/* Dark */</span> <span class="hljs-number">1</span>;
      <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-string">"light"</span>:
      tmp = <span class="hljs-comment">/* Light */</span> <span class="hljs-number">0</span>;
      <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">default</span>:
      tmp = <span class="hljs-comment">/* Light */</span> <span class="hljs-number">0</span>;
  }
  <span class="hljs-keyword">return</span> <span class="hljs-comment">/* record */</span> [
    <span class="hljs-comment">/* id */</span> jsUser.id,
    <span class="hljs-comment">/* username */</span> jsUser.username,
    <span class="hljs-comment">/* birthdate */</span> Js_primitive.null_undefined_to_opt(jsUser.birthdate),
    <span class="hljs-comment">/* theme */</span> tmp
  ];
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toJs</span>(<span class="hljs-params">user</span>) </span>{
  <span class="hljs-keyword">var</span> match = user[<span class="hljs-comment">/* theme */</span> <span class="hljs-number">3</span>];
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">id</span>: user[<span class="hljs-comment">/* id */</span> <span class="hljs-number">0</span>],
    <span class="hljs-attr">username</span>: user[<span class="hljs-comment">/* username */</span> <span class="hljs-number">1</span>],
    <span class="hljs-attr">birthdate</span>: Js_null_undefined.from_opt(user[<span class="hljs-comment">/* birthdate */</span> <span class="hljs-number">2</span>]),
    <span class="hljs-attr">theme</span>: match !== <span class="hljs-number">0</span> ? <span class="hljs-string">"dark"</span> : <span class="hljs-string">"light"</span>
  };
}

exports.fromJs = fromJs;
exports.toJs = toJs;
<span class="hljs-comment">/* No side effect */</span></code></pre>
<h2 id="les-standard-libs"><a href="#les-standard-libs" class="phenomic-HeadingAnchor">#</a>Les standard-libs</h2>
<p>Si le besoin s'en fait sentir, BuckleScript propose naturellement la stdlib de
JavaScript.</p>
<pre><code class="hljs language-reason"><span class="hljs-keyword">let</span> myArray = [|<span class="hljs-type">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>|<span class="hljs-type">];

myArray</span>
  |<span class="hljs-type">> Js</span>.Array.map((item) => item * <span class="hljs-number">2</span>)
  |<span class="hljs-type">> Js</span>.Array.reduce((acc, item) => acc + item, <span class="hljs-number">0</span>);</code></pre>
<p>vous sortira:</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE</span>
<span class="hljs-meta">"use strict"</span>;

<span class="hljs-keyword">var</span> myArray = <span class="hljs-comment">/* array */</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];

myArray
  .map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>{
    <span class="hljs-keyword">return</span> item &#x3C;&#x3C; <span class="hljs-number">1</span>;
  })
  .reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">acc, item</span>) </span>{
    <span class="hljs-keyword">return</span> (acc + item) | <span class="hljs-number">0</span>;
  }, <span class="hljs-number">0</span>);

exports.myArray = myArray;
<span class="hljs-comment">/*  Not a pure module */</span></code></pre>
<h2 id="la-technique-bourrin"><a href="#la-technique-bourrin" class="phenomic-HeadingAnchor">#</a>La technique bourrin</h2>
<p>Pour les cas extr√™mes ou vous voulez juste balancer une fonction JS, vous
pouvez:</p>
<pre><code class="hljs language-reason"><span class="hljs-comment">/* %bs.raw pour une expression, %%bs.raw pour un bloc de code arbitraire */</span>
<span class="hljs-keyword">let</span> log: <span class="hljs-function"><span class="hljs-params">string</span> =></span> unit = [%bs.raw {|
  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) </span>{
    <span class="hljs-built_in">console</span>.log(a);
  }
|}];

log(<span class="hljs-string">"ok"</span>);</code></pre>
<p>qui vous sort un joli:</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE</span>
<span class="hljs-meta">"use strict"</span>;

<span class="hljs-keyword">var</span> Curry = <span class="hljs-built_in">require</span>(<span class="hljs-string">"bs-platform/lib/js/curry.js"</span>);

<span class="hljs-keyword">var</span> log = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>) </span>{
  <span class="hljs-built_in">console</span>.log(a);
};

Curry._1(log, <span class="hljs-string">"ok"</span>);

exports.log = log;
<span class="hljs-comment">/* log Not a pure module */</span></code></pre>
<h2 id="conclusion"><a href="#conclusion" class="phenomic-HeadingAnchor">#</a>Conclusion</h2>
<p>OCaml peut en grande majorit√© √™tre compil√© en JavaScript tr√®s simple, parce
qu'il partage beaucoup de concepts avec ce dernier. Il est assez simple de cr√©er
des ponts entre les deux langages √† l'aide des FFI. L'√©norme avantage de cette
feature, c'est que l'on peut commencer √† utiliser Reason incr√©mentalement sur
son projet sans avoir √† tout r√©√©crire d'un coup.</p>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/reason/interop/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/reason/interop/</guid><pubDate>Tue, 10 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction √† ReasonML (ou pourquoi j'ai arr√™t√© d'utiliser JavaScript)]]></title><description><![CDATA[<p>Les bugs c'est chiant, surtout quand on sait qu'on aurait pu les √©viter. Avec
JavaScript, c'est plus facile d'en avoir que de les √©viter.</p>
<p>JavaScript, on ne peut pas y √©chapper parce que c'est partout, parce que c'est
le langage de programmation le plus utilis√© sur Terre, et parce que c'est le
seul truc qui (pour l'instant) tourne nativement dans le navigateur. Et puis
c'est pas si mal, c'est facile de l'apprendre en bidouillant un peu, c'est tr√®s
permissif et pas trop frustrant pour d√©buter.</p>
<p>Le probl√®me c'est que c'est facile d'en faire, mais c'est tr√®s dur d'en faire
<strong>bien</strong> (moins que CSS, mais quand m√™me). On s'est tous d√©j√† retrouv√© avec
<code>undefined is not a function</code>, <code>null is not an object</code> ou un bon gros <code>[object Object]</code> qui tra√Æne dans la console.</p>
<h2 id="pourquoi-est-ce-que-cest-comme-√ßa-"><a href="#pourquoi-est-ce-que-cest-comme-%C3%A7a-" class="phenomic-HeadingAnchor">#</a>Pourquoi est-ce que c'est comme √ßa ?</h2>
<p>JavaScript est un langage dynamiquement et faiblement typ√©, ce qui veut dire :</p>
<ul>
<li>qu'une fonction ne sait pas ce qu'elle prend ou retourne comme type
d'arguments, c'est √† vous de g√©rer</li>
<li>que le programme n'en a aucune id√©e non plus tant qu'il n'execute pas la
portion de code</li>
</ul>
<p>Tout √ßa fait qu'il est tr√®s difficile de faire confiance √† du code JavaScript.</p>
<figure>
<img src="./js.png" alt="js" />
<figcaption>Source: MIT</figcaption>
</figure>
<p>Il existe Flow et TypeScript (dont on a parl√© dans un <a href="/fr/articles/js/flow/">pr√©c√©dent
article</a> et un <a href="fr/articles/podcast/3/">podcast</a>), deux
projets qui permettent d'apporter du typage statique pour s√©curiser son code.
Ils contraignent votre usage de JavaScript, mais devront toujours se battre
contre sa permissivit√©.</p>
<p>√áa revient au final √† coller des rustines sur vos pneus avant d'aller rouler sur
des clous, √ßa va vous prot√©ger un peu, mais √ßa reste de base pas bien malin
d'aller rouler sur des clous.</p>
<p>Il existe des langages qui ont la judicieuse id√©e de balayer la route pour virer
les clous avant d'y aller : les langages typ√©s fortement et statiquement (10
points pour Gryffondor pour cette m√©taphore fil√©e).</p>
<p>OCaml est un de ces langages. Il est de la famille ML et a √©t√© cr√©√© en France
dans les ann√©es 90. Il est √† peu pr√®s aussi √¢g√© que JavaScript mais est beaucoup
plus sage. Il est certes fortement et statiquement typ√©, mais il inf√®re la
plupart des types du programme (ce qui veut dire que vous n'avez pas √†
renseigner les types partout, il va l'extrapoler d√®s qu'il le peut). En bonus,
il poss√®de de <a href="https://ocaml.org/learn/tutorials/comparison_of_standard_containers.html">bonnes
data-structures</a>.</p>
<p>Seulement voil√†, OCaml, comme beaucoup de langages fonctionnels n'a pas vraiment
mis l'accent sur l'accessibilit√© pour les d√©butants, et a une syntaxe qu'on peut
pour le moins qualifier de pas tr√®s friendly: elle n'a rien de bien mal, mais
mettez quelqu'un qui vient de JS/PHP/Java devant, √ßa va pas lui causer des
masses:</p>
<pre><code class="hljs language-ocaml"><span class="hljs-keyword">let</span> <span class="hljs-keyword">rec</span> qsort = <span class="hljs-keyword">fun</span> <span class="hljs-keyword">value</span> ->
  <span class="hljs-keyword">match</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">with</span>
   | <span class="hljs-literal">[]</span> -> <span class="hljs-literal">[]</span>
   | pivot :: rest ->
       <span class="hljs-keyword">let</span> is_less x = x &#x3C; pivot <span class="hljs-keyword">in</span>
       <span class="hljs-keyword">let</span> left, right = <span class="hljs-type">List</span>.partition is_less rest <span class="hljs-keyword">in</span>
       qsort left @ [pivot] @ qsort right;;</code></pre>
<figure>
<img src="./giphy.gif" alt="" />
<figcaption>fig. 1: dev JS devant du code OCaml</figcaption>
</figure>
<p>C'est l√† qu'intervient Reason, un projet initi√© par <a href="https://twitter.com/jordwalke">le cr√©ateur de
React</a>. Les premi√®res it√©rations de React √©taient
d'ailleurs cod√©es dans un langage cousin de OCaml, le SML.</p>
<p>C'est en gros:</p>
<ul>
<li>OCaml</li>
<li>avec une syntaxe <em>beginner-friendly</em></li>
<li>avec un tooling le rendant plus simple √† utiliser</li>
<li>qui peut compiler vers JavaScript et de multiples plateformes</li>
</ul>
<p>Avec son type system, OCaml propose un langage <em>safe-by-design</em>, chose que m√™me
avec une palanqu√©e d'outils, on ne peut pas atteindre avec JavaScript.</p>
<p>Le langage propose par d√©faut une approche fonctionnelle et immutable, mais
permet cependant de choisir d'utiliser des structures mutables et de l'orient√©
objet au besoin.</p>
<h2 id="le-langage"><a href="#le-langage" class="phenomic-HeadingAnchor">#</a>Le langage</h2>
<p>Reason comporte plus de types de primitifs que JavaScript:</p>
<pre><code class="hljs language-reason"><span class="hljs-comment">/* pas un gros "number" fourre tout, magique */</span>
<span class="hljs-number">1</span>; <span class="hljs-comment">/* int */</span>
<span class="hljs-number">1.0</span>; <span class="hljs-comment">/* float */</span>
<span class="hljs-comment">/* un caract√®re est d'un type diff√©rent de string */</span>
<span class="hljs-string">"foo"</span>; <span class="hljs-comment">/* string */</span>
'a'; <span class="hljs-comment">/* char */</span>
<span class="hljs-comment">/* on trouve list ET array, chacun peut √™tre utilis√© pour diff√©rents cas */</span>
[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-comment">/* list */</span>
[| <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> |]; <span class="hljs-comment">/* array */</span>
<span class="hljs-comment">/* pas de null, mais des valeurs de type `option` qui contiennent
  soit une valeur, soit rien */</span>
Some(<span class="hljs-number">1</span>); <span class="hljs-comment">/* option int */</span>
None; <span class="hljs-comment">/* option int */</span></code></pre>
<p>Puisqu'il est fortement typ√©, il est impossible de mixer les types comme en
JavaScript, vous devrez obligatoirement les convertir:</p>
<pre><code class="hljs language-reason"><span class="hljs-number">1</span> + <span class="hljs-number">1.0</span>;
<span class="hljs-comment">/* Error:
  This expression has type int but an expression was expected of type float */</span>
<span class="hljs-number">1</span> + int_of_float(<span class="hljs-number">1.0</span>);
<span class="hljs-comment">/* - : int = 2 */</span></code></pre>
<p>La plupart des op√©rations de transformations de type primitifs vers un autre
sont accessibles dans le module <code>Pervasives</code> qui contient plein de petits
utilitaires bien pratiques. Toutes les fonctions de ce module sont accessibles
directement dans n'importe quel de vos fichiers.</p>
<p>Les fonctions de Reason sont beaucoup plus puissantes qu'en JavaScript:</p>
<pre><code class="hljs language-reason">let <span class="hljs-keyword">add </span>= (a, <span class="hljs-keyword">b) </span>=> a + <span class="hljs-keyword">b;
</span><span class="hljs-comment">/* int => int => int */</span>
<span class="hljs-keyword">add(1, </span><span class="hljs-number">2</span>)<span class="hljs-comment">;</span>
<span class="hljs-comment">/* 3 */</span>
<span class="hljs-keyword">add(1, </span><span class="hljs-number">2</span>.<span class="hljs-number">0</span>)<span class="hljs-comment">;</span>
<span class="hljs-comment">/* This expression has type float but an expression was expected of type int */</span>

<span class="hljs-comment">/* Les fonctions sont "auto-curried", ce qui signifie qu'une fonction
   qui n'a pas re√ßu tous ses param√®tres retourne une nouvelle fonction
  qui va recevoir les param√®tres manquants */</span>
let <span class="hljs-keyword">addOne </span>= <span class="hljs-keyword">add(1);
</span><span class="hljs-comment">/* int => int */</span>

<span class="hljs-comment">/* Les fonctions peuvent avoir des param√®tres nomm√©s, optionnels et avec des valeurs par d√©faut */</span>
let sayHi = (~name, ~punct=<span class="hljs-string">"!"</span>, ()) => <span class="hljs-string">"Hello "</span> ++ name ++ punct<span class="hljs-comment">;</span>
<span class="hljs-comment">/* name::string => string */</span>
sayHi(~name=<span class="hljs-string">"you"</span>, ())<span class="hljs-comment">;</span>
<span class="hljs-comment">/* "Hello you!" */</span>
<span class="hljs-comment">/* L'ordre des arguments nomm√©s n'a pas d'importance*/</span>
sayHi(~punct,<span class="hljs-string">"?"</span>, ~name=<span class="hljs-string">"you"</span>, ())<span class="hljs-comment">;</span>
<span class="hljs-comment">/* "Hello you?" */</span></code></pre>
<p>Pour d√©finir l'√©quivalent d'un <em>plain-object</em> JavaScript en Reason, on utilise
des records:</p>
<pre><code class="hljs language-reason">/* On doit typer les records */
<span class="hljs-keyword">type</span> <span class="hljs-keyword">user</span> <span class="hljs-title">= {
  username</span>: <span class="hljs-keyword">string</span>,
  age: int
};

/* Les records ont un nombre de cl√©s fini, vous <span class="hljs-keyword">ne</span> pouvez pas en
  ommettre une ou en mettre une en trop */
let <span class="hljs-keyword">user</span> <span class="hljs-title">= { username</span>: <span class="hljs-string">"Bob"</span> };
/* Error: Some record fields are undefined: age */

let <span class="hljs-keyword">user</span> <span class="hljs-title">= { username</span>: <span class="hljs-string">"Bob"</span>, age: <span class="hljs-number">20</span> };

/* Les records sont immutables par d√©faut */
let olderUser = {...user, age: user.age + <span class="hljs-number">1</span> };</code></pre>
<p>Reason poss√®de un syst√®me de module tr√®s puissant: par d√©faut, chaque fichier de
votre codebase est un module, mais vous pouvez √©galement d√©clarer des modules
<em>dans</em> un module.</p>
<pre><code class="hljs language-reason"><span class="hljs-keyword">module</span> User = {
  <span class="hljs-keyword">type</span> t = {
    id: <span class="hljs-built_in">string</span>,
    username: <span class="hljs-built_in">string</span>,
    email: option(<span class="hljs-built_in">string</span>)
  };
  <span class="hljs-keyword">let</span> make = <span class="hljs-function">(<span class="hljs-params">~id, ~username, ~email</span>) =></span> {id, username, email};
  <span class="hljs-keyword">let</span> sayHi = <span class="hljs-function">(<span class="hljs-params">user</span>) =></span> <span class="hljs-string">"Hello "</span> ++ user.username ++ <span class="hljs-string">"!"</span>;
};

<span class="hljs-comment">/* Pour utiliser un module, tapez son nom, tout simplement */</span>
User.make(~id=<span class="hljs-string">"0"</span>, ~username=<span class="hljs-string">"bloodyowl"</span>, ~email=None)
  <span class="hljs-comment">/* (ah oui, le pipe existe d√©j√† ici, pas besoin d'attendre ES2050)*/</span>
  |> User.sayHi
  |> print_endline;
<span class="hljs-comment">/* "Hello bloodyowl" */</span>

<span class="hljs-comment">/* On peut √©galement rendre toutes les valeurs d'un module accessibles localement */</span>
User.(
  make(~id=<span class="hljs-string">"0"</span>, ~username=<span class="hljs-string">"bloodyowl"</span>, ~email=None)
    |> sayHi
    |> print_endline
);

<span class="hljs-comment">/* Carr√©ment les rendre accessibles globalement dans le module */</span>
open User;

make(~id=<span class="hljs-string">"0"</span>, ~username=<span class="hljs-string">"bloodyowl"</span>, ~email=None)
  |> sayHi
  |> print_endline;

<span class="hljs-comment">/* Ou m√™me √©tendre un module statiquement et proprement,
  √ßa vous parle √ßa, Prototype et MooTools ?! */</span>
<span class="hljs-keyword">module</span> UserThatCanSayBye = {
  include User;
  <span class="hljs-keyword">let</span> sayBye = <span class="hljs-function">(<span class="hljs-params">user</span>) =></span> <span class="hljs-string">"Bye "</span> ++ user.username ++ <span class="hljs-string">"!"</span>;
};</code></pre>
<p>Il existe √©galement des functors, qui sont des sortes de fonctions retournant
des modules √† partir d'autres modules, mais on ne l'abordera pas dans cet
article.</p>
<p>Reason poss√®de √©galement des variants, il s'agit de types pouvant avoir
diff√©rents cas. Prenons l'exemple d'un message de chat:</p>
<pre><code class="hljs language-reason">type <span class="hljs-built_in">image</span> = {url: <span class="hljs-keyword">string</span>, <span class="hljs-built_in">width</span>: <span class="hljs-keyword">int</span>, <span class="hljs-built_in">height</span>: <span class="hljs-keyword">int</span>};

<span class="hljs-comment">/* chaque cas du variant peut prendre des param√®tres */</span>
type message =
  | <span class="hljs-keyword">String</span>(<span class="hljs-keyword">string</span>) <span class="hljs-comment">/* soit une cha√Æne de caract√®res */</span>
  | Image(<span class="hljs-built_in">image</span>) <span class="hljs-comment">/* soit une image */</span>
  | Emoji(<span class="hljs-keyword">string</span>); <span class="hljs-comment">/* soit un gros emoji */</span>

let stringMessage = <span class="hljs-keyword">String</span>(<span class="hljs-string">"Hello"</span>); <span class="hljs-comment">/* On cr√©e la valeur avec son constructeur */</span>
let imageMessage = Image({url: <span class="hljs-string">"https://fakeimg.pl/300x300"</span>, <span class="hljs-built_in">width</span>: <span class="hljs-number">300</span>, <span class="hljs-built_in">height</span>: <span class="hljs-number">300</span>});
let emojiMessage = Emoji({js|üê´|js}); <span class="hljs-comment">/* Quand la string contient de caract√®res unicode,
  on doit utiliser {js|votre string|js} */</span></code></pre>
<p>Ici, notre type <code>message</code> est bien d√©limit√©, et ses valeurs ne peuvent √™tre que
celles que l'on a d√©fini.</p>
<p>Pour utiliser les valeurs d'un variant, on peut les extraire √† l'aide de
<code>switch</code>, qui va <em>pattern-matcher</em> pour nous permettre d'identifier et
d'extraire les valeurs.</p>
<pre><code class="hljs language-reason"><span class="hljs-comment">/* Petit bonus, l'exemple utilise ReasonReact, mais on d√©taillera √ßa dans un prochain article */</span>
<span class="hljs-keyword">let</span> component = ReasonReact.statelessComponent(<span class="hljs-string">"ChatMessage"</span>);

<span class="hljs-keyword">let</span> make = <span class="hljs-function">(<span class="hljs-params">~message, _children</span>) =></span> {
  ...component,
  <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">_</span>) =></span>
    &#x3C;div>
      (<span class="hljs-keyword">switch</span> message {
        | <span class="hljs-built_in">String</span>(value) => ReasonReact.stringToElement(value)
        | Image({<span class="hljs-attr">url</span>: src, width, height}) => <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">img</span> <span class="hljs-attr">width</span> <span class="hljs-attr">height</span> <span class="hljs-attr">src</span> /></span>
        /* Si par m√©garde j'oublie un cas possible dans un switch, je vais avoir un joli warning du
          compiler qui me dira:
            This pattern-matching is not exhaustive.
            Here is an example of a value that is not matched:
              Emoji
        */
        | Emoji(value) =>
          </span>&#x3C;div style=(ReactDOMRe.Style.make(~fontSize="40px", ()))>
            (ReasonReact.stringToElement(value))
          &#x3C;/div><span class="xml">
      })
    <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
};</code></pre>
<p>En Reason, les <em>let bindings</em> ont automatiquement le block parent comme scope,
on peut du coup √©crire des choses comme ceci :</p>
<pre><code class="hljs language-reason"><span class="hljs-keyword">let</span> <span class="hljs-attr">value</span> = {
  <span class="hljs-keyword">let</span> <span class="hljs-attr">a</span> = <span class="hljs-number">1</span>;
  <span class="hljs-keyword">let</span> <span class="hljs-attr">b</span> = <span class="hljs-number">2</span>;
  a + b; <span class="hljs-comment">/* la derni√®re expression est toujours retourn√©e par d√©faut */</span>
};
<span class="hljs-comment">/* let value : int = 3 */</span>
a
<span class="hljs-comment">/* Error: Unbound value a */</span></code></pre>
<p>Voil√† pour l'introduction √† ReasonML, pour en d√©couvrir un peu plus je vous
invite √† aller lire la <a href="https://reasonml.github.io/">documentation officielle</a>.
On verra dans les prochains articles comment fonctionne
<a href="https://reasonml.github.io/reason-react">ReasonReact</a> (les bindings Reason vers
React, avec quelques petites features sympathiques en plus), et comment
l'adopter incr√©mentalement dans sa codebase pour avoir du code plus s√ªr, et
<em>(spoilers)</em>, plus rapide que si vous l'√©criviez √† la main.</p>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/reason/introduction-reason/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/reason/introduction-reason/</guid><pubDate>Mon, 02 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Podcast 6: L'air chaud]]></title><description><![CDATA[<p>Un √©pisode en petit comit√©:</p>
<ul>
<li>Zoontek (<a href="https://twitter.com/Zoontek">https://twitter.com/Zoontek</a>)</li>
<li>Matthias (<a href="https://twitter.com/bloodyowl">https://twitter.com/bloodyowl</a>)</li>
</ul>
<p>On vous parle de ReasonML, une nouvelle syntaxe et tooling pour rendre OCaml
plus accessible, et on s'attarde un peu sur ce dernier, ainsi que sur
l'√©cosyst√®me permettant √† Reason d'√™tre utilis√© avec JavaScript.</p>
<p>On vous pr√©sente √©galement de mani√®re d√©taill√©e ReactNative, le framework qui
permet de cr√©er des applications natives avec React en JavaScript.</p>
<p>Les quelques liens (si peu):</p>
<ul>
<li>Reason <a href="https://facebook.github.io/reason/">https://facebook.github.io/reason/</a></li>
<li>OCaml <a href="https://ocaml.org">https://ocaml.org</a></li>
<li>Les containers OCaml
<a href="https://ocaml.org/learn/tutorials/comparison_of_standard_containers.html">https://ocaml.org/learn/tutorials/comparison_of_standard_containers.html</a></li>
<li>js_of_ocaml <a href="http://ocsigen.org/js_of_ocaml/">http://ocsigen.org/js_of_ocaml/</a></li>
<li>BuckleScript <a href="http://bucklescript.github.io/bucklescript/Manual.html">http://bucklescript.github.io/bucklescript/Manual.html</a></li>
<li>BuckleScript Reason (online demo)
<a href="http://bucklescript.github.io/bucklescript/reason-demo/">http://bucklescript.github.io/bucklescript/reason-demo/</a></li>
<li>BuckleScript benchmark <a href="https://github.com/neonsquare/bucklescript-benchmark">https://github.com/neonsquare/bucklescript-benchmark</a></li>
<li>ReasonReact <a href="https://reasonml.github.io/reason-react/">https://reasonml.github.io/reason-react/</a></li>
<li>ReReactPrimitives (petit travail perso qui peut aider √† aborder la syntaxe)
<a href="https://github.com/bloodyowl/reReactPrimitives">https://github.com/bloodyowl/reReactPrimitives</a></li>
<li>BuckleScript TEA <a href="https://github.com/OvermindDL1/bucklescript-tea">https://github.com/OvermindDL1/bucklescript-tea</a></li>
<li>Discord ReasonML <a href="https://discord.gg/reasonml">https://discord.gg/reasonml</a></li>
<li>ReactNative <a href="https://facebook.github.io/react-native/">https://facebook.github.io/react-native/</a></li>
<li>ReactNative Changelog <a href="https://github.com/facebook/react-native/releases">https://github.com/facebook/react-native/releases</a></li>
<li>MetroBundler <a href="https://github.com/facebook/metro-bundler">https://github.com/facebook/metro-bundler</a></li>
<li>Create React Native App
<a href="https://facebook.github.io/react-native/blog/2017/03/13/introducing-create-react-native-app.html">https://facebook.github.io/react-native/blog/2017/03/13/introducing-create-react-native-app.html</a></li>
<li>Expo <a href="https://expo.io">https://expo.io</a></li>
<li>Qui utilise ReactNative ?
<a href="https://facebook.github.io/react-native/showcase.html">https://facebook.github.io/react-native/showcase.html</a></li>
<li>Animated <a href="https://github.com/animatedjs/animated">https://github.com/animatedjs/animated</a></li>
<li>ReactNativeWeb <a href="https://github.com/necolas/react-native-web/">https://github.com/necolas/react-native-web/</a></li>
<li>ReactPrimitives <a href="https://github.com/lelandrichardson/react-primitives">https://github.com/lelandrichardson/react-primitives</a></li>
<li>NativeModules
<a href="https://facebook.github.io/react-native/docs/native-modules-ios.html">https://facebook.github.io/react-native/docs/native-modules-ios.html</a></li>
<li>React Navigation <a href="https://github.com/react-community/react-navigation">https://github.com/react-community/react-navigation</a></li>
<li>React Native Maps airbnb/react-native-maps</li>
<li>Lottie React Native <a href="https://github.com/airbnb/lottie-react-native">https://github.com/airbnb/lottie-react-native</a></li>
<li>React Native Vector Icons <a href="https://github.com/oblador/react-native-vector-icons">https://github.com/oblador/react-native-vector-icons</a></li>
<li>React Native Animatable <a href="https://github.com/oblador/react-native-animatable">https://github.com/oblador/react-native-animatable</a></li>
<li>BuckleScript React Native <a href="https://github.com/BuckleTypes/bs-react-native">https://github.com/BuckleTypes/bs-react-native</a></li>
</ul>
<p>La track du g√©n√©rique:</p>
<p><a href="https://soundcloud.com/matthias-le-brun/moon">https://soundcloud.com/matthias-le-brun/moon</a></p>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/329979777&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<ul>
<li>Le
<a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de
Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/6/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/6/</guid><pubDate>Tue, 27 Jun 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Podcast 5: On va tous crever !]]></title><description><![CDATA[<p>Tr√®s certainement notre pire √©pisode, en tout cas le plus p√©nible √† monter.</p>
<p>Sont pr√©sents mentalement dans la pi√®ce dans laquelle s'est d√©roul√©
l'enregistrement :</p>
<ul>
<li>Georges (<a href="https://twitter.com/skinnyfoetusboy">https://twitter.com/skinnyfoetusboy</a>)</li>
<li>Mathieu (<a href="https://twitter.com/Zoontek">https://twitter.com/Zoontek</a>)</li>
<li>Matthias (<a href="https://twitter.com/bloodyowl">https://twitter.com/bloodyowl</a>)</li>
</ul>
<p>Est pr√©sent physiquement:</p>
<ul>
<li>Maxime Thirouin ouin ouin (<a href="https://twitter.com/MoOx">https://twitter.com/MoOx</a>)</li>
</ul>
<p>On vous parle du concept d'immutabilit√©, du nouvel outil Prettier ainsi que du
langage Go que Mathieu nous pr√©sente.</p>
<p>Liens: -Prettier: <a href="https://github.com/prettier/prettier">https://github.com/prettier/prettier</a> -LearnXInYMinutes:
<a href="https://learnxinyminutes.com">https://learnxinyminutes.com</a></p>
<p>Erratum par avance:</p>
<ul>
<li>Go en JS, √ßa existe: <a href="https://github.com/gopherjs/gopherjs">https://github.com/gopherjs/gopherjs</a></li>
<li>Go a vraiment une tabulation √† la con: <a href="https://golang.org/cmd/gofmt/">https://golang.org/cmd/gofmt/</a></li>
</ul>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/320551397&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<ul>
<li>Le
<a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de
Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/5/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/5/</guid><pubDate>Wed, 03 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Podcast 4: √áa scale pas quand on sait en faire (feat. iAmNotCyril)]]></title><description><![CDATA[<p>On se retrouve avec un √©pisode un poil plus long et arros√©, avec Mathieu
(<a href="https://twitter.com/Zoontek">https://twitter.com/Zoontek</a>), Georges (<a href="https://twitter.com/skinnyfoetusboy">https://twitter.com/skinnyfoetusboy</a>),
Maxime (<a href="https://twitter.com/MoOx">https://twitter.com/MoOx</a>), Matthias (<a href="https://twitter.com/bloodyowl">https://twitter.com/bloodyowl</a>) et
le premier invit√© de l'√©mission : Cyril (<a href="https://twitter.com/IAmNotCyril">https://twitter.com/IAmNotCyril</a>),
d√©veloppeur front-end chez Netcats (<a href="https://twitter.com/gonetcats">https://twitter.com/gonetcats</a>).</p>
<p>Est-ce que le m√©tier d'int√©grateur va dispara√Ætre ? On d√©bat des m√©tiers
gravitant autour du front-end web, de ce que c'√©tait hier, de ce que c'est
aujourd'hui, de comment on pense que ce sera demain, le tout avec une bonne dose
de mauvaise foi‚Ñ¢.</p>
<p>On parle aussi d'√©diteurs de code de fa√ßon presque intelligible: Sublime Text vs
Atom vs VSCo‚Ä¶ le mieux c'est de laisser Mathieu parler de ce dernier.</p>
<p>Les liens:</p>
<ul>
<li>Sublime Text:
<a href="https://web.archive.org/web/20080701071916/http://www.sublimetext.com/">https://web.archive.org/web/20080701071916/http://www.sublimetext.com/</a></li>
<li>Atom: <a href="https://atom.io">https://atom.io</a></li>
<li>VSCode: <a href="https://code.visualstudio.com">https://code.visualstudio.com</a></li>
</ul>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/313086300%3Fsecret_token%3Ds-uDXSJ&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<ul>
<li>Le
<a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de
Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/4/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/4/</guid><pubDate>Tue, 21 Mar 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Formatez votre JavaScript avec prettier]]></title><description><![CDATA[<p>Rob Pike et Ken Thompson ont con√ßu le langage de programmation Go de fa√ßon √† ce
que celui-ci soit √† port√©e des jeunes d√©veloppeurs : si vous d√©couvrez et
commencez √† apprendre le Go le lundi, vous devriez √™tre en mesure d'√™tre
productif le mercredi. Le langage est extr√™mement minimaliste, il y a rarement
plus d'une fa√ßon de faire quelque chose.</p>
<p>Seulement voil√†, le d√©veloppeur tortur√© se posera toujours un tas de questions
essentielles : tabs ou spaces ? 2, 4 ou 8 spaces ? Single quotes ou double
quotes ? Apr√®s quelles structures de contr√¥le passer une ligne ? Mais aussi les
√©ternels : vim ou emacs ? Flow ou TypeScript ? Maintenir ce projet Angular 1 ou
d√©missionner comme un prince ?</p>
<p><em>N.B. : Pour information, les bonnes r√©ponses sont bien √©videmment spaces, 2,
single quotes, vim, flow, la d√©mission</em></p>
<p>C'est pour r√©pondre √† ce probl√®me (enfin, ceux li√©s au formatage de votre code)
que Go int√®gre un formatting tool (<code>fmt</code>, comme la commande Unix), intitul√©
<a href="https://golang.org/cmd/gofmt/">gofmt</a>.</p>
<ol>
<li>Vous codez comme vous le sentez</li>
<li>Vous sauvegardez votre fichier</li>
<li>Votre code est automatiquement format√©</li>
<li>Vous vous sentez frustr√©</li>
<li>Tr√®s vite, vous vous rendez compte que c'est pour votre bien, et que perdre
du temps ou d√©battre sur ce genre de d√©tails, c'est tout sauf utile</li>
</ol>
<p>Autre avantage non n√©gligeable : le code Go que vous trouverez dans d'autres
packages, des exemples, etc. sera toujours format√© de la m√™me fa√ßon.</p>
<p><em>√Ä noter : Reason offre quelque chose de similaire avec
<a href="https://facebook.github.io/reason/tools.html">refmt</a>.</em></p>
<p>Cette solution officielle n'existe pas en JS. Mais c'est ici qu'intervient
<a href="https://github.com/prettier/prettier">prettier</a> (et non
<a href="https://www.npmjs.com/package/jsfmt">jsfmt</a>, qui existe mais ne semble plus
maintenu), un projet relativement r√©cent, en version <code>0.21</code> √† l'heure o√π j'√©cris
ces lignes. Compatible <em>out of the box</em> avec le JS ES2017, JSX, flow, il offre
√©galement le moins de configuration possible (ce qui est une bonne chose). Le
projet est activement suivi par Facebook, qui discute m√™me la possibilit√© de
s'en servir sur la codebase de
<a href="https://github.com/facebook/react/pull/9101">React</a>.</p>
<h2 id="comment-√ßa-fonctionne-"><a href="#comment-%C3%A7a-fonctionne-" class="phenomic-HeadingAnchor">#</a>Comment √ßa fonctionne ?</h2>
<p>Croyez-le ou non, ce n'est pas "tellement" complexe. √Ä la mani√®re de babel ou
flow, prettier utilise un AST parser (Abstract Syntax Tree parser) afin
d'analyser le contenu de votre fichier JS, suite √† quoi il va simplement
formater votre code sans tenir compte de la forme pr√©c√©dente, en ne gardant que
ce qui est important: le fond, pas la forme.</p>
<p>Je vous invite √† jouer avec <a href="https://astexplorer.net/">AST explorer</a> pour
comprendre beaucoup plus simplement comment tout cela fonctionne.</p>
<h2 id="installation"><a href="#installation" class="phenomic-HeadingAnchor">#</a>Installation</h2>
<pre><code class="hljs language-console">npm install --save-dev prettier</code></pre>
<p>Ou, pour les meilleurs d'entre vous :</p>
<pre><code class="hljs language-console">yarn add --dev prettier</code></pre>
<p>¬Ø\<em>( „ÉÑ )</em>/¬Ø</p>
<h2 id="configuration"><a href="#configuration" class="phenomic-HeadingAnchor">#</a>Configuration</h2>
<p>Car oui, il y en a tout de m√™me un peu. Il est possible de r√©gler:</p>
<ul>
<li>La longueur maximale des lignes (<code>printWidth</code>, <code>80</code> caract√®res par d√©faut)</li>
<li>Le nombre d'espaces pour l'indentation (<code>tabWidth</code>, <code>2</code> par d√©faut, pas de
tabs)</li>
<li>Single quotes / double quotes (<code>singleQuote</code>, <code>false</code> par d√©faut)</li>
<li>S'il faut ajouter des virgules en fin de certaines structures (comme les
objets, mais aussi dans les param√®tres de fonction, ce qui est possible depuis
peu) (<code>trailingComma</code>, <code>none</code> par d√©faut, <code>es5</code> et <code>all</code> sont √©galement
possibles)</li>
<li>S'il faut ajouter des espaces dans un objet √©crit sur une seule ligne
(<code>bracketSpacing</code>, <code>true</code> par d√©faut)</li>
<li>Comment fermer les balises JSX (<code>jsxBracketSameLine</code>, <code>false</code> par d√©faut)</li>
<li>Quel parser utiliser (<code>parser</code>, <code>babylon</code> par d√©faut, <code>flow</code> est disponible)</li>
</ul>
<blockquote>
<p>Mais attends‚Ä¶ Si l'on peut malgr√© tout configurer tout √ßa, ce n'est plus
vraiment un style standard ?</p>
</blockquote>
<p>Oui et non, car il y aura toujours beaucoup de d√©tails sur lesquels il nous sera
impossible de choisir, les options resteront minimalistes. Par exemple, vous ne
pourrez jamais retirer les points-virgules.</p>
<p><code>EDIT: Il semblerait que malgr√© ce qui a pu √™tre annonc√© par l'auteur de prettier, une option --no-semicolons soit dans les tuyaux.</code></p>
<p>Dans tous les cas, prettier reste un outil extr√™mement pratique pour forcer le
formatage du code au sein de votre √©quipe.</p>
<p>Ouvrez votre <code>package.json</code>, c'est parti.</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">"scripts"</span>: {
    <span class="hljs-attr">"prettify"</span>: <span class="hljs-string">"prettier src/**/*.js"</span>
  },
  <span class="hljs-attr">"devDependencies"</span>: {
    <span class="hljs-attr">"prettier"</span>: <span class="hljs-string">"^0.21.0"</span>
  }
}</code></pre>
<p><code>npm run prettify</code> ou <code>yarn run prettify</code> formateront automatiquement tous les
fichiers <code>.js</code> contenus dans votre dossier <code>/src</code>. Bon j'avoue, c'est assez
basique comme usage. Ajoutons-y notre config pr√©f√©r√©e.</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">"scripts"</span>: {
    <span class="hljs-attr">"prettify"</span>:
      <span class="hljs-string">"prettier --single-quote --trailing-comma all --write '{src,__{tests,mocks}__}/**/*.js'"</span>
  },
  <span class="hljs-attr">"devDependencies"</span>: {
    <span class="hljs-attr">"prettier"</span>: <span class="hljs-string">"^0.21.0"</span>
  }
}</code></pre>
<p><code>npm run prettify</code> ou <code>yarn run prettify</code> formateront maintenant automatiquement
tous les fichiers <code>.js</code> contenus dans vos dossiers <code>/src</code>, <code>__tests__</code> et
<code>__mocks__</code>, en utilisant le parser de flow, pr√©f√©rant les single quotes et en
ajoutant une virgule en fin de chaque structure possible.</p>
<p>OK. Mais si un membre de l'√©quipe oublie d'ex√©cuter le script avant de commiter
son code ? <strong>We got this !</strong> (avec 2 d√©pendances de plus).</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">"scripts"</span>: {
    <span class="hljs-attr">"precommit"</span>: <span class="hljs-string">"lint-staged"</span>,
    <span class="hljs-attr">"prettify"</span>:
      <span class="hljs-string">"prettier --single-quote --trailing-comma all --write '{src,__{tests,mocks}__}/**/*.js'"</span>
  },
  <span class="hljs-attr">"lint-staged"</span>: {
    <span class="hljs-attr">"{src,__{tests,mocks}__}/**/*.js"</span>: [
      <span class="hljs-string">"prettier --single-quote --trailing-comma all --write"</span>,
      <span class="hljs-string">"git add"</span>
    ]
  },
  <span class="hljs-attr">"devDependencies"</span>: {
    <span class="hljs-attr">"husky"</span>: <span class="hljs-string">"^0.13.2"</span>,
    <span class="hljs-attr">"lint-staged"</span>: <span class="hljs-string">"^3.3.1"</span>,
    <span class="hljs-attr">"prettier"</span>: <span class="hljs-string">"^0.21.0"</span>
  }
}</code></pre>
<h2 id="les-plugins"><a href="#les-plugins" class="phenomic-HeadingAnchor">#</a>Les plugins</h2>
<p>Si vous ne pouvez pas attendre le moment du commit pour admirer votre code
fraichement format√©, il existe d√©j√† pas mal de plugins, pour pas mal d'√©diteurs
: <code>prettier-atom</code>, <code>prettier-vscode</code>, <code>Jsprettier</code> (pour Sublime Text), mais
aussi pour emacs, vim, les IDE Jetbrain, etc. Tout est dans le
<a href="https://github.com/prettier/prettier/blob/master/README.md">README</a>.</p>
<p><em>Protip: Inutile de vous conforter au style de formatage de votre √©quipe au sein
de votre √©diteur si le code est √† nouveau format√© en pre-commit.</em></p>
<h2 id="quelques-exemples-cest-possible-"><a href="#quelques-exemples-cest-possible-" class="phenomic-HeadingAnchor">#</a>Quelques exemples, c'est possible ?</h2>
<p>J'ai mieux. Il est possible d'<a href="https://prettier.github.io/prettier">essayer en
ligne</a> ! ‚ú®</p>
<h2 id="donc-cest-bon-tu-conseilles-"><a href="#donc-cest-bon-tu-conseilles-" class="phenomic-HeadingAnchor">#</a>Donc c'est bon, tu conseilles ?</h2>
<p>C'est tout de m√™me √† r√©fl√©chir. Le projet est encore jeune et en beta, m√™me s'il
√©volue extr√™mement vite. Tout n'est pas encore parfaitement support√©, mais je
vous rassure, si vous n'utilisez pas le flow-parser vous ne risquez pas de
rencontrer beaucoup de probl√®mes avec la derni√®re version.</p>
<p>Des projets tels que
<a href="https://github.com/facebook/immutable-js/commit/9bcc8b54a17c3bbc94d70864121784bc91011e8f">immutable-js</a>,
<a href="https://github.com/necolas/react-native-web/commit/a2f25a46c495ca53a75e728cfb14dbdf67cdb342">react-native-web</a>
et
<a href="https://github.com/babel/babel/commit/bdbe2cfbc5ab5ba6f528b7ee3e4bf5ed940a47af">babel</a>
y sont d√©j√† pass√©s. Pourquoi pas vous ? üòâ</p>
]]></description><link>http://putaindecode.io/fr/articles/js/prettier/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/prettier/</guid><pubDate>Wed, 08 Mar 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Podcast √©pisode 3]]></title><description><![CDATA[<h2 id="orga-nis√©"><a href="#orga-nis%C3%A9" class="phenomic-HeadingAnchor">#</a><em>Orga-nis√©</em></h2>
<p>Pour ce 3√®me √©pisode, on a miraculeusement <em>r√©ussi</em> √† faire plus court.</p>
<p>Y participent :</p>
<ul>
<li>Maxime alias <a href="https://twitter.com/MoOx">MoOx</a></li>
<li>Mathieu alias <a href="https://twitter.com/Zoontek">Zoontek</a></li>
<li>Matthias alias <a href="https://twitter.com/bloodyowl">bloodyowl</a></li>
</ul>
<p>et on vous y parle de :</p>
<ul>
<li>typing</li>
<li>OO vs FP (premier √©pisode d'une s√©rie, stay tuned)</li>
<li>monorepos</li>
</ul>
<p>On esp√®re que √ßa vous plaira !</p>
<p>Bisous.</p>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/307914736&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<ul>
<li>Le
<a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de
Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/3/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/3/</guid><pubDate>Thu, 16 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction √† styled-components]]></title><description><![CDATA[<p>Il existe de nombreuses approches et <a href="https://github.com/MicheleBertoli/css-in-js">solutions
diff√©rentes</a> pour g√©rer le CSS en
ReactJS, je vais parler ici de
<a href="https://github.com/styled-components/styled-components">styled-components</a> qui
permet de gagner en productivit√© et en qualit√© quand on veut cr√©er et distribuer
des composants UI.</p>
<p>La force de
<a href="https://github.com/styled-components/styled-components">styled-components</a>
c'est de faciliter la cr√©ation de composants visuels ReactJS minimalistes et
configurables, en combinant du <strong>CSS standard</strong> et <strong>un zeste de JavaScript</strong>.
Ces composants deviendront litt√©ralement les pi√®ces de lego qui pourront √™tre
utilis√©es et partag√©es entre les UIs de toutes vos applications, sites webs...</p>
<p>Si vous voulez jouer avec, je vous conseille d'utiliser
<a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> pour
g√©n√©rer un projet vierge puis d'ajouter styled-components au projet : <code>npm i --save styled-components</code>.</p>
<p>Avec styled, on peut abstraire le CSS et le DOM de la vue, ce qui va grandement
simplifier le code de la partie "m√©tier" de l'application, et am√©liorer la
lisibilit√©.</p>
<h5 id="avant-"><a href="#avant-" class="phenomic-HeadingAnchor">#</a>Avant :</h5>
<pre><code class="hljs language-jsx"><span class="hljs-comment">// solution en pure CSS-in-JS</span>

<span class="hljs-keyword">const</span> styles = {
  <span class="hljs-attr">box</span>: {
    <span class="hljs-attr">width</span>: <span class="hljs-string">'60%'</span>,
    <span class="hljs-attr">border</span>: <span class="hljs-string">'1px solid silver'</span>
  },
  <span class="hljs-attr">title</span>: {
    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">'1.2em'</span>,
    <span class="hljs-attr">fontWeight</span>: <span class="hljs-string">'bold'</span>
  },
  <span class="hljs-attr">description</span>: {
    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">'0.8em'</span>
  },
  <span class="hljs-attr">important</span>: {
    <span class="hljs-attr">fontWeight</span>: <span class="hljs-string">'bold'</span>
  }
}

<span class="hljs-comment">// nos composants int√®grent les styles dans le code</span>
&#x3C;div className={ styles.box }>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{</span> <span class="hljs-attr">styles.title</span> }></span>{ title }<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
  &#x3C;div className={ classnames(styles.description, styles.important) }>{ description }&#x3C;<span class="hljs-regexp">/div>
&#x3C;/</span>div></code></pre>
<h5 id="apr√®s-"><a href="#apr%C3%A8s-" class="phenomic-HeadingAnchor">#</a>Apr√®s :</h5>
<pre><code class="hljs language-jsx"><span class="hljs-comment">// avec styled-components</span>

<span class="hljs-keyword">const</span> Box = styled.div<span class="hljs-string">`
  width: 60%;
  border: 1px solid silver;
`</span>

<span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 1.2em;
  font-weight: bold;
`</span>

<span class="hljs-keyword">const</span> Description = styled.div<span class="hljs-string">`
  font-size: 0.8em;
  font-weight: <span class="hljs-subst">${ props => props.important ? <span class="hljs-string">'bold'</span> : <span class="hljs-string">'normal '</span>}</span>
`</span>

<span class="hljs-comment">// les composants sont pr√©-styl√©s, pas de bruit g√©n√©r√© par le styling</span>
&#x3C;Box>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Title</span>></span>{ title }<span class="hljs-tag">&#x3C;/<span class="hljs-name">Title</span>></span></span>
  &#x3C;Description important>{ description }&#x3C;<span class="hljs-regexp">/Description>
&#x3C;/</span>Box></code></pre>
<h3 id="avantages-"><a href="#avantages-" class="phenomic-HeadingAnchor">#</a>Avantages :</h3>
<ul>
<li>
<p><a href="https://github.com/styled-components/styled-components/graphs/contributors">community
powered</a></p>
<ul>
<li>moving fast, <a href="https://github.com/styled-components/styled-components/tree/v2">v2 en
cours</a></li>
</ul>
</li>
<li>support des
<a href="https://github.com/styled-components/styled-components/blob/master/docs/theming.md">th√®mes</a></li>
<li><a href="https://github.com/styled-components/styled-components/blob/master/docs/css-we-support.md">syntaxe CSS
"classique"</a>
mais scop√© automatiquement</li>
<li>Gestion des media queries, pseudo-selectors, nesting</li>
<li>Un <a href="https://github.com/rofrischmann/inline-style-prefixer/">autoprefixer-like
int√©gr√©</a></li>
<li>Code "m√©tier" plus lisible</li>
<li>Compatible react-native</li>
<li>Compatible avec les <a href="https://facebook.github.io/jest/">snapshots Jest</a> out of
the box</li>
<li>Ne n√©cessite pas de loader Webpack sp√©cifique ‚ù§Ô∏è</li>
</ul>
<h3 id="inconv√©nients-"><a href="#inconv%C3%A9nients-" class="phenomic-HeadingAnchor">#</a>Inconv√©nients :</h3>
<ul>
<li>pas encore id√©al pour <a href="https://github.com/styled-components/styled-components/issues/134">des styles tr√®s
dynamiques</a></li>
<li>pas encore id√©al pour <a href="https://github.com/styled-components/styled-components/issues/124">le
server-side</a></li>
<li>syntaxe pas forcement bien <a href="https://github.com/styled-components/styled-components#linting">surlign√©e ou
lint√©e</a> mais
<a href="https://github.com/styled-components/styled-components#syntax-highlighting">des plugins
existent</a>.</li>
</ul>
<h3 id="fonctionnement"><a href="#fonctionnement" class="phenomic-HeadingAnchor">#</a>Fonctionnement</h3>
<p>Techniquement,
<a href="https://github.com/styled-components/styled-components">styled-components</a> va
pour chaque composant "styled" pr√©sent dans le DOM :</p>
<ul>
<li>injecter les classes CSS n√©cessaires pour ce composant dans le <code>&#x3C;head></code> de la
page, au runtime.</li>
<li>fournir au composant une props <code>className</code> unique (ainsi que ses <code>ownProps</code>)</li>
</ul>
<p>La syntaxe est certes exotique, le CSS √©tant d√©fini dans un template-string
ES2015, mais ceci rend le code tr√®s concis.</p>
<p>Pour en savoir plus sur les "Template Strings", ou "Litt√©raux de gabarits" en
Fran√ßais üá´üá∑ vous pouvez lire <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits">l'excellente doc chez
MDN</a>.</p>
<h3 id="usage-"><a href="#usage-" class="phenomic-HeadingAnchor">#</a>Usage :</h3>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">'styled-components'</span>

<span class="hljs-comment">// exemple ici avec une div</span>
<span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 3rem;
  color: #ff3333;
`</span>

<span class="hljs-comment">// utilisable comme ceci :</span>
&#x3C;Title>Hello, World&#x3C;<span class="hljs-regexp">/Title></span></code></pre>
<p>ceci qui g√©n√®rera automatiquement dans le DOM:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dxhUOh"</span>></span>Hello, World<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></code></pre>
<p>et injectera dans le CSS de la page le style associ√© :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.dxhUOh</span> {
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3rem</span>;
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff3333</span>;
}</code></pre>
<p><img src="./styled-1.png" width="200"/></p>
<h2 id="exemples"><a href="#exemples" class="phenomic-HeadingAnchor">#</a>Exemples</h2>
<h3 id="composition"><a href="#composition" class="phenomic-HeadingAnchor">#</a>Composition</h3>
<p>Les composants styled sont des composants ReactJS standards qui peuvent recevoir
des <code>children</code> et se composer les uns avec les autres.</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Box = styled.div<span class="hljs-string">`
  border: 1px solid silver;
  width: 80%;
  padding: 1em;
  text-align: center;
  background: #e7f3ff;
`</span>

<span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 1.5em;
  color: #0080ff;
`</span>

&#x3C;Box>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Title</span>></span>Hello, World<span class="hljs-tag">&#x3C;/<span class="hljs-name">Title</span>></span></span>
&#x3C;<span class="hljs-regexp">/Box></span></code></pre>
<p><img src="./styled-2.png" width="300"/></p>
<h3 id="etendre-des-composants-en-css"><a href="#etendre-des-composants-en-css" class="phenomic-HeadingAnchor">#</a>Etendre des composants en CSS</h3>
<p>Surcharger un composant avec du CSS :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 3rem;
  color: #ff3333;
`</span>
<span class="hljs-keyword">const</span> BlueTitle = styled(Title)<span class="hljs-string">`
  color: #0080ff;
`</span>
&#x3C;Title>titre en rouge&#x3C;<span class="hljs-regexp">/Title>
&#x3C;BlueTitle>titre en bleu&#x3C;/</span>BlueTitle></code></pre>
<p><img src="./styled-3.png" width="200"/></p>
<h3 id="pseudo-classes"><a href="#pseudo-classes" class="phenomic-HeadingAnchor">#</a>Pseudo classes</h3>
<p>Les pseudo-classes, le nesting sont accept√©es</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Button = styled.button<span class="hljs-string">`
  font-size: 3rem;
  color: #ff3333;
  &#x26;:hover {
    color: #0080ff;
  }
`</span>;</code></pre>
<p><img src="./styled-hover.gif" width="100"/></p>
<h3 id="media-queries"><a href="#media-queries" class="phenomic-HeadingAnchor">#</a>Media queries</h3>
<p>Les medias queries sont possibles facilement :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Cover = styled.div<span class="hljs-string">`
  background-image: url(http://putaindecode.io/assets/npm.png);
  background-repeat: no-repeat;
  background-size: contain;
  background-position: center center;
  width: 800px;
  height: 300px;

  @media (max-width: 800px) {
    width: 400px;
  }
`</span>;</code></pre>
<p>Usage avanc√© des media queries :
<a href="https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates">https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates</a></p>
<h3 id="composants-configurables"><a href="#composants-configurables" class="phenomic-HeadingAnchor">#</a>Composants configurables</h3>
<p>Mieux : comme le composant √† directement acc√®s aux <code>props</code> (attributs du
composant), on peut le configurer depuis le JavaScript :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 3rem;
  color: <span class="hljs-subst">${props => props.blue ? <span class="hljs-string">'#0080ff'</span> : <span class="hljs-string">'#ff3333'</span>}</span>;
`</span>
&#x3C;Title>titre en rouge&#x3C;<span class="hljs-regexp">/Title>
&#x3C;Title blue>titre en bleu&#x3C;/</span>Title></code></pre>
<p><img src="./styled-3.png" width="200"/></p>
<h3 id="dans-un-composant-react-classique"><a href="#dans-un-composant-react-classique" class="phenomic-HeadingAnchor">#</a>Dans un composant React "classique"</h3>
<p>Avec la methode <code>styled.css</code>, une <code>className</code> unique est g√©n√©r√©e et peut √™tre
utilis√©e pour vos composants :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> Notification <span class="hljs-keyword">from</span> <span class="hljs-string">"./Notification"</span>;

<span class="hljs-keyword">const</span> warning = styled.css<span class="hljs-string">`
  color: #ff3333;
`</span>;

<span class="hljs-keyword">const</span> WarningNotification = <span class="hljs-function"><span class="hljs-params">()</span> =></span> &#x3C;Notification className={warning} />;</code></pre>
<h3 id="r√©utiliser-des-styles"><a href="#r%C3%A9utiliser-des-styles" class="phenomic-HeadingAnchor">#</a>R√©utiliser des styles</h3>
<p>Comme styled utilise des <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits">templates
literals</a>
vous pouvez utiliser n'importe quelle variable dans votre CSS :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> textStyle = <span class="hljs-string">`
  font-size: 2em;
  letter-spacing: 5px;
`</span>
<span class="hljs-keyword">const</span> TextRed = styled.div<span class="hljs-string">`
  <span class="hljs-subst">${textStyle}</span>
  color: #ff3333;
`</span>
<span class="hljs-keyword">const</span> TextBlue = styled.div<span class="hljs-string">`
  <span class="hljs-subst">${textStyle}</span>
  color: #0080ff;
`</span>
&#x3C;TextRed>texte en rouge&#x3C;<span class="hljs-regexp">/TextRed>
&#x3C;TextBlue>texte en bleu&#x3C;/</span>TextBlue></code></pre>
<p><img src="./styled-4.png" width="200"/></p>
<h3 id="attributs-html"><a href="#attributs-html" class="phenomic-HeadingAnchor">#</a>Attributs HTML</h3>
<p>Par d√©faut les composants styled passent toutes leur <code>props</code> au DOM, par exemple
ici, <code>placeholder</code>.</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> SuperInput = styled.input<span class="hljs-string">`
  border: 2px solid silver;
  border-radius: 2px;
  text-align: center;
  font-size: 1.5em;
`</span>

&#x3C;SuperInput placeholder=<span class="hljs-string">"Your name"</span>/></code></pre>
<p><img src="./styled-5.png" width="200"/></p>
<h3 id="utiliser-le-theming"><a href="#utiliser-le-theming" class="phenomic-HeadingAnchor">#</a>Utiliser le theming</h3>
<p>Pour rendre son UI themable, il suffit d'encapsuler son App dans un composant
<code>ThemeProvider</code>; Chaque composant styled se verra alors fournir une props
<code>theme</code> avec toutes les variables du th√®me :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Button = styled.button<span class="hljs-string">`
  background: <span class="hljs-subst">${props => props.theme.main || <span class="hljs-string">'silver'</span>}</span>;
`</span>

<span class="hljs-comment">// Create a green theme</span>
<span class="hljs-keyword">const</span> greenTheme = {
  <span class="hljs-attr">main</span>: <span class="hljs-string">'mediumseagreen'</span>,
}

<span class="hljs-comment">// Create a blue theme</span>
<span class="hljs-keyword">const</span> blueTheme = {
  <span class="hljs-attr">main</span>: <span class="hljs-string">'#0080ff'</span>,
}

&#x3C;ThemeProvider theme={greenTheme}>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Button</span>></span>I'm green!<span class="hljs-tag">&#x3C;/<span class="hljs-name">Button</span>></span></span>
&#x3C;<span class="hljs-regexp">/ThemeProvider></span></code></pre>
<p>Et pour aller loin, consultez la <a href="https://github.com/styled-components/styled-components/blob/master/docs/theming.md#using-theming">documentation
officielle</a></p>
<h3 id="injecter-des-css-globaux"><a href="#injecter-des-css-globaux" class="phenomic-HeadingAnchor">#</a>Injecter des CSS globaux</h3>
<p>Parfois on a besoin d'int√©grer aussi du CSS "global". Par exemple pour les
fontes, ou lorsque l'on migre une grosse application.</p>
<p>Voici une fa√ßon de le faire avec styled :</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { injectGlobal } <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;

injectGlobal<span class="hljs-string">`
  @import url('https://fonts.googleapis.com/css?family=Roboto');
  * {
    font-family: 'Roboto', sans-serif;
  }
`</span>;</code></pre>
<p>Plus d'infos sur <a href="https://github.com/styled-components/styled-components/blob/master/docs/api.md#injectglobal">la doc
d'injectGlobal</a></p>
<h3 id="react-storybook"><a href="#react-storybook" class="phenomic-HeadingAnchor">#</a>React Storybook</h3>
<p>En ajoutant <a href="https://github.com/storybooks/react-storybook">react-storybook</a>
dans votre projet, vous pourrez facilement vous constituter une biblioth√®que
visuelle avec vos propres composants, hors-contexte, dans tous leurs √©tats
possibles, et avec du Hot-Reload ce qui est <strong>tr√®s tr√®s pratique dans la phase
de conception</strong>.</p>
<h3 id="autres-liens-"><a href="#autres-liens-" class="phenomic-HeadingAnchor">#</a>Autres liens :</h3>
<ul>
<li><a href="https://github.com/styled-components/styled-components/blob/master/docs">Documentation
officielle</a></li>
<li><a href="https://www.smashingmagazine.com/2017/01/styled-components-enforcing-best-practices-component-based-systems/">Enforcing Best Practices In Component-Based
Systems</a></li>
<li><a href="http://mxstbr.blog/2016/11/styled-components-magic-explained/">The magic behind üíÖ
styled-components</a></li>
<li><a href="https://github.com/MicheleBertoli/css-in-js">React CSS-in-JS techniques
comparison</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/js/react/styled-components/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/react/styled-components/</guid><pubDate>Wed, 01 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Podcast √©pisode 2]]></title><description><![CDATA[<h2 id="le-lendemain-des-trois-jours"><a href="#le-lendemain-des-trois-jours" class="phenomic-HeadingAnchor">#</a><em>Le lendemain des trois jours</em></h2>
<p>Y participent :</p>
<ul>
<li>Mathieu alias <a href="https://twitter.com/Zoontek">Zoontek</a></li>
<li>Georges alias <a href="https://twitter.com/skinnyfoetusboy">skinnyfoetusboy</a></li>
<li>Matthias alias <a href="https://twitter.com/bloodyowl">bloodyowl</a></li>
</ul>
<p>et on vous y parle de :</p>
<ul>
<li>solutions pour l'UI qu'on passe en revue</li>
<li>unit testing JS</li>
<li>nouveaux MacBook 2016</li>
</ul>
<p>On esp√®re que √ßa vous plaira !</p>
<p>Bisous.</p>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/301667566&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<ul>
<li>Le
<a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de
Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/2/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/2/</guid><pubDate>Thu, 12 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Quelques petits hÕîÃûÃûÃ≠ÕôÕ†aÃò√ßÃ´ÃØÕìkÃµÕñÃòÃ¨Ã≥Ã±ÃØÃ§sÃ¥ÕéÃªÃØ typographiques]]></title><description><![CDATA[<p>On ne va pas se mentir, la typo c'est quand m√™me super important sur le web, et
il va falloir admettre que ce bon vieux Gutenberg avait eu un sacr√© flair √†
l'√©poque.</p>
<p>Ah, qu'il est bon de parcourir un web parfaitement typesett√©, avec de jolies
polices bien kern√©es et- NOPE. Au mieux une bonne grosse Arial bien crasse dans
ta face quand c'est pas de la Comic Sans MS rendue avec un cr√©nelage moisi sous
Windows XP, #geocities.</p>
<p>Heureusement, le web a progress√© depuis, et en tant que cr√©ateurs, nous pouvons
tous apporter notre petit morceau de plomb √† l'√©difice typographique avec
quelques petites astuces. Ce sont quelques unes de ces astuces que je vais vous
fournir ici, alors ouvrez bien les mirettes.</p>
<h3 id="ampersand-hacking-je-suis-s√ªr-que-√ßa-ne-sappelle-pas-comme-√ßa"><a href="#ampersand-hacking-je-suis-s%C3%BBr-que-%C3%A7a-ne-sappelle-pas-comme-%C3%A7a" class="phenomic-HeadingAnchor">#</a>Ampersand hacking (je suis s√ªr que √ßa ne s'appelle pas comme √ßa)</h3>
<p>Pas loin d'√™tre l'un des plus connus, il est √©galement l'un des plus simples.</p>
<p>Il consiste simplement √† remplacer un glyphe de votre texte par le glyphe
correspondant √† ce caract√®re depuis une autre typo. Je m'explique.</p>
<p><img src="./csslickbait.png" alt="cliquez pas, s√©rieux"></p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>></span>
  Until the
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"amp"</span>></span>&#x26;amp;<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
  of time
<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span></code></pre>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.amp</span> {
  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"Baskerville"</span>;
  <span class="hljs-attribute">font-style</span>: italic;
}</code></pre>
<p>Voil√†, c'est pas bien folichon mais √ßa fonctionne : vous pouvez d√®s √† pr√©sent
enrouler toutes vos esperluettes (si vous √™tes chef de projet, une esperluette
c'est un "et commercial") dans des <code>span</code> pour leur donner une bien chouette
gueule.</p>
<p>Mais √ßa c'est pour les quelques d'entre vous qui ont la main sur le contenu
textuel du projet, beaucoup d'autres n'ont pas ce luxe et se font fournir de
pauvres textes mal traduits servis par un vieux CMS miteux.</p>
<p>Ce serait chouette d'avoir un moyen pour sp√©cifier une typo pour certains
caract√®res au cas par cas, non ?</p>
<p>Bonne nouvelle.</p>
<h3 id="go-go-unicode-range-"><a href="#go-go-unicode-range-" class="phenomic-HeadingAnchor">#</a>Go Go Unicode-Range !</h3>
<p>Reprenons notre exemple pr√©c√©dent, que nous allons impl√©menter avec la feature
<code>unicode-range</code> de CSS.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>></span>Until the &#x26;amp; of time<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span></code></pre>
<pre><code class="hljs language-css">@<span class="hljs-keyword">font-face</span> {
  <span class="hljs-attribute">font-family</span>: BaskervilleAmpersand;
  <span class="hljs-attribute">font-style</span>: italic;
  <span class="hljs-attribute">font-weight</span>: normal;
  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">"path/to/your/font/i'm/not/your/mother/Baskerville.eot"</span>);
  <span class="hljs-attribute">unicode-range</span>: U+<span class="hljs-number">0026</span>; <span class="hljs-comment">/* unicode codepoint for &#x26;amp; */</span>
}

<span class="hljs-selector-tag">html</span> {
  <span class="hljs-attribute">font-family</span>: BaskervilleAmpersand, Helvetica, Arial, Serif;
}</code></pre>
<p>Ainsi, en tirant parti d'<code>unicode-range</code> et du stacking des polices, toutes les
esperluettes dans le corps de texte seront rendues en Baskerville et les autres
caract√®res tomberont en d√©faut sur Helvetica puis Arial, puis Serif en g√©n√©ral.
Bon, ne me faites pas dire ce que je n'ai pas dit, cette propri√©t√© CSS n'est pas
parfaite non plus, rien que le fait de devoir aller chercher les codepoints
unicode pour retrouver le caract√®re √† remplacer est assez lourd et fastidieux
(sauf si vous connaissez unicode par c≈ìur mais l√† vous me faites peur). L'autre
possibilit√© si vous utilisez PostCSS, c'est le plugin
<a href="https://github.com/ben-eb/postcss-unicode-characters"><code>postcss-unicode-characters</code></a>
par <a href="https://github.com/ben-eb">@beneb</a> qui simplifie grandement l'API
d'unicode-range et que je vous invite √† aller voir. Enfin, la bonne nouvelle
c'est que c'est une propri√©t√© relativement bien support√©e, √† partir d'IE9 vous
devriez vous en tirer.</p>
<h3 id="je-suis-sur-ie8"><a href="#je-suis-sur-ie8" class="phenomic-HeadingAnchor">#</a>Je suis sur IE8</h3>
<p>(mes condol√©ances) Une autre solution existe pour vous ! Il faut juste cr√©er sa
propre police et- non s√©rieux revenez c'est pas si horrible, promis. Bon,
reprenons. Pour ce genre de manipulations vous aurez besoin d'un √©diteur de
police, j'aime personnellement beaucoup BirdFont, qui a l'avantage d'√™tre
gratuit et disponible sur macOS, Windows, pas mal de versions de Linux et m√™me
OpenBSD. On entre ici dans la partie tr√®s proc√©duri√®re de cet article mais mieux
vaut √ßa que de vous laisser seuls dans l'interface spartiate de BirdFont.</p>
<p><img src="./birdfont.png"></p>
<p>Spartiate. Bref, le bouton tout en haut √† gauche, c'est le bouton "Nouvelle
police", vous pouvez cliquer dessus pour arriver √† l'√©cran suivant.</p>
<p><img src="./birdfont1.png"></p>
<p>√Ä partir de l√† vous allez devoir choisir un caract√®re √† remplacer. √áa peut √™tre
la lettre E comme √ßa peut √™tre l'emoji Pizza, personnellement j'ai d√©cid√© de
remplacer le symbole dit "paragraphe" ou "Simflouz" si vous avez jou√© aux Sims
(et "Sporeflouz" si vous avez jou√© √† Spore mais passons). Si votre caract√®re est
un peu dur √† trouver dans la liste, l'option de recherche est faite pour √ßa.
Double-cliquer sur un caract√®re vous emm√®nera √† l'interface d'√©dition.</p>
<p><img src="./birdfont3.png"></p>
<p>Nous voici dans l'interface d'√©dition de glyphe proprement dite. Elle ne vous
d√©paysera pas trop si vous avez d√©j√† utilis√© un outil de cr√©ation de SVG.
N'h√©sitez pas √† vous en donner √† c≈ìur joie si vous avez la fibre cr√©atrice,
personnellement comme vous pouvez le voir sur la capture, je suis d√©j√† un
artiste accompli. Le menu hamburger en haut √† droite vous permettra √©galement
d'importer directement un SVG en tant que glyphe si vous n'avez pas la chance de
dessiner aussi bien que moi et que vous pr√©f√©rez d√©l√©guer ce genre de t√¢ches √†
votre designer. Ensuite, depuis le m√™me menu hamburger, vous pourrez exporter
votre typo dans tous les formats que vous voudrez si tant est que vous vouliez
les exporter en TTF, EOT ou SVG.</p>
<p>De l√†, vous n'aurez plus qu'√† importer cette font comme dans le chapitre 2 et
vous pourrez enfin rajouter "typesetter" dans vos comp√©tences sur LinkedIn.</p>
<p>Vous n'avez plus qu'√† trouver les utilisations les plus int√©ressantes de ce
genre de pratiques (il y en a plein).</p>
<p>La bise.</p>
]]></description><link>http://putaindecode.io/fr/articles/css/remplacer-glyphes-font/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/css/remplacer-glyphes-font/</guid><pubDate>Tue, 10 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Petit tour d'horizon de l'animation sur le web (et ailleurs)]]></title><description><![CDATA[<p>Les animations prennent une grande place dans les interfaces utilisateur. Loin
de n'apporter qu'un c√¥t√© esth√©tique, elles augmentent la performance per√ßue,
am√©liorent notre exp√©rience en nous aidant √† nous rep√©rer et en guidant notre
attention. Sur les applications natives, ces animations sont souvent plus
naturelles que sur le web, et pour cause, beaucoup de leurs animations sont des
<em>springs</em>.</p>
<p>Qu'est-ce qu'une animation <em>spring</em> ? Pour arriver √† le d√©finir, voyons comment
on a l'habitude de cr√©er des animations avec les technologies web.</p>
<p>CSS poss√®de deux propri√©t√©s permettant d'animer des valeurs: les <code>animation</code> et
les <code>transition</code>. Au del√† de la diff√©rence entre leurs capacit√©s au sein de CSS
(propri√©t√© VS ensemble de propri√©t√©s avec des √©tapes), les deux reposent sur le
m√™me m√©canisme. On va donc √©tudier le plus simple: <code>transition</code>.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.block</span> {
  <span class="hljs-attribute">transition</span>: <span class="hljs-number">300ms</span> linear transform;
}

<span class="hljs-selector-class">.block</span><span class="hljs-selector-pseudo">:hover</span> {
  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(1.05);
}</code></pre>
<p>Cette transition est d√©finie sur un mod√®le simple : on fixe une dur√©e
d'animation (ici <code>300ms</code>) et un easing ‚Äî<em>ou </em>zizine<em> si vous √©coutez <a href="http://putaindecode.io/fr/articles/podcast/1/">le
podcast</a></em>‚Äî qui est une fonction
d'interpolation (ici <code>linear</code>).</p>
<p>L'easing est une fonction toute b√™te comme vous avez pu en voir au coll√®ge et
les avez dessin√©es sur votre calculatrice Casio ou Texas (si comme moi vous
√©tiez le seul p√©quin de la classe √† avoir l'autre mod√®le, √† devoir toujours se
d√©merder parce que les profs savaient pas comment la v√¥tre marchait).</p>
<p>Bref, une fonction d'easing est assez simple. Par exemple, la <code>linear</code> √ßa
revient √† :</p>
<p><img src="./Linear.png"></p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> linear = <span class="hljs-function"><span class="hljs-params">x</span> =></span> x; <span class="hljs-comment">// such complicated</span>
<span class="hljs-comment">// didn't even import `lodash.identity` from npm</span></code></pre>
<p>Le param√®tre <code>x</code> varie entre <code>0</code> et <code>1</code>, c'est la progression de l'animation. Ce
param√®tre vaut <code>0</code> quand vous √™tes au d√©but de l'animation et <code>1</code> √† la fin.</p>
<p>En faisant √† la main une version du syst√®me g√©rant l'animation, √ßa donne quelque
chose dans ce style :</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> transition = <span class="hljs-function">(<span class="hljs-params">{ duration, easing, onUpdate, startValue, endValue }</span>) =></span> {
  <span class="hljs-keyword">const</span> startDate = <span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">// le moment o√π commence l'animation</span>
  <span class="hljs-comment">// la fonction tick sera execut√©e p√©riodiquement</span>
  <span class="hljs-keyword">const</span> tick = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
    <span class="hljs-keyword">const</span> absoluteProgress = (<span class="hljs-built_in">Date</span>.now() - startDate) / duration; <span class="hljs-comment">// on calcule `x`</span>
    <span class="hljs-keyword">const</span> progress = <span class="hljs-built_in">Math</span>.min(absoluteProgress, <span class="hljs-number">1</span>); <span class="hljs-comment">// on fait gaffe de pas d√©border</span>
    <span class="hljs-keyword">const</span> progressWithEasing = easing(progress); <span class="hljs-comment">// on applique la fonction d'easing</span>
    <span class="hljs-comment">// pour calculer la valeur, on diminue progressivement la valeur initiale et l'on accroit la valeur finale</span>
    onUpdate(
      (<span class="hljs-number">1</span> - progressWithEasing) * startValue + progressWithEasing * endValue
    );
    <span class="hljs-keyword">if</span> (progress &#x3C; <span class="hljs-number">1</span>) {
      <span class="hljs-comment">// si c'est pas fini, on repart pour un tour</span>
      requestAnimationFrame(tick);
    }
  };
  tick();
};

myElement.onclick = <span class="hljs-function"><span class="hljs-params">()</span> =></span>
  transition({
    <span class="hljs-attr">duration</span>: <span class="hljs-number">500</span>,
    <span class="hljs-attr">easing</span>: <span class="hljs-function"><span class="hljs-params">x</span> =></span> x,
    <span class="hljs-attr">onUpdate</span>: <span class="hljs-function"><span class="hljs-params">value</span> =></span>
      (myElement.style.transform = <span class="hljs-string">`translateY(<span class="hljs-subst">${value + <span class="hljs-string">"px"</span>}</span>)`</span>),
    <span class="hljs-attr">startValue</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">endValue</span>: <span class="hljs-number">200</span>
  });</code></pre>
<p>Pour d√©finir cette fonction d'easing, CSS vous permet √©galement de configurer
des courbes de B√©zier cubiques.</p>
<p>Une courbe de B√©zier cubique se d√©finit avec 4 points : <code>P0</code>, <code>P1</code>, <code>P2</code> et
<code>P3</code>. Il en est ensuite d√©riv√© une courbe √† partir de ces quatre points. C'est
avec ce m√©canisme que fonctionne la plume de la plupart des logiciels d'√©dition
d'image.</p>
<p><img src="./Bezier.png"></p>
<p>Vu que votre animation commence et finit √† des valeurs d√©finies √† l'avance, deux
points sont fix√©s √† l'avance : <code>P0</code> sera toujours <code>(0, 0)</code> et <code>P3</code> <code>(1, 1)</code>.</p>
<p>Vous avez avec CSS la libert√© de d√©finir <code>P1</code> et <code>P2</code> sous la forme
<code>cubic-bezier(P1x, P1y, P2x, P2y)</code>. Pour visualiser le fonctionnement, je vous
conseille de faire un tour sur <a href="http://cubic-bezier.com">cubic-bezier</a> de <a href="https://twitter.com/leaverou">Lea
Verou</a>.</p>
<p>Tout ce que nous avons vu jusque-l√† sont des animations <em>tim√©es</em> (vive les
anglicismes). Leur dur√©e est connue √† l'avance et est immuable, les variations
possibles se feront dans les limites de ces contraintes.</p>
<p>Ces animations sont tr√®s pratiques pour certaines animations basiques et
rempliront tr√®s bien leur mission, mais elles peuvent rapidement avoir des
limites :</p>
<p>Avec CSS :</p>
<ul>
<li>On n'a aucun contr√¥le sur l'ex√©cution de l'animation</li>
<li>Configurer des animations complexes complique la maintenance</li>
</ul>
<p>Avec un easing basique en g√©n√©ral :</p>
<ul>
<li><code>cubic-bezier</code> limite √©norm√©ment les possibilit√©s d'√©volution de la valeur
anim√©e (e.g. on souhaite que l'animation ait de l'√©lasticit√©, les
timing-functions ne permettent de faire qu'un seul d√©bord qui ne parait pas
"naturel").</li>
<li>Avoir des animations coh√©rentes dans toute notre UI est extr√™mement
contraignant avec CSS</li>
</ul>
<p>Pour l'√©lasticit√©, vous pouvez vous d√©brouiller avec <code>@keyframes</code>, hardcoder
toutes les valeurs, les <em>timer</em> √† la main, y passer des heures pour vous
retrouver avec 60 √©tapes dans votre animation et au final de ne pas √™tre
satisfait du r√©sultat, claquer la porte de votre boulot et partir √©lever des
brebis dans les Pyr√©n√©es.</p>
<p>C'est l√† qu'interviennent les <em>springs</em>.</p>
<p>Une animation spring vous expose en g√©n√©ral deux param√®tres : <code>tension</code> et
<code>friction</code> (ou <code>stiffness</code>, pour rigidit√© &#x26; <code>damping</code>, pour amortissement, selon
les syst√®mes). Ce sont des valeurs logiques dans ce contexte, puisqu'elles
viennent des lois de la physique (big up Newton).</p>
<p>Quelques exemples sur les <a href="http://facebook.github.io/rebound-js/examples/">demos de
Rebound.js</a> peuvent vous aider √†
visualiser ce que repr√©sentent ces param√®tres au sein de l'animation.</p>
<p>Afin d'ob√©ir √† des lois "logiques" de la physique, l'animation spring doit
prendre en compte √† chaque <code>tick</code> non seulement la valeur actuelle et celle
d'arriv√©e mais aussi sa rapidit√© actuelle : c'est ce qui lui permet d'encha√Æner
naturellement les animations.</p>
<p>√Ä chaque frame, il va ex√©cuter la fonction suivante pour d√©terminer la <code>value</code>
et <code>velocity</code> √† venir (note : ce c√¥t√© est une simplification du code utilis√© par
<a href="https://github.com/chenglou/react-motion">react-motion</a>).</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> unitOfTime = <span class="hljs-number">1</span> / <span class="hljs-number">60</span>; <span class="hljs-comment">// the number of seconds in a frame</span>
<span class="hljs-keyword">const</span> precision = <span class="hljs-number">0.01</span>;

<span class="hljs-keyword">const</span> step = <span class="hljs-function">(<span class="hljs-params">lastValue, lastVelocity, toValue, stiffness, damping</span>) =></span> {
  <span class="hljs-keyword">const</span> spring = -stiffness * (lastValue - toValue);
  <span class="hljs-keyword">const</span> damper = -damping * lastVelocity;

  <span class="hljs-keyword">const</span> all = spring + damper;
  <span class="hljs-keyword">const</span> nextVelocity = lastVelocity + all * unitOfTime;
  <span class="hljs-keyword">const</span> nextValue = lastValue + nextVelocity * unitOfTime;

  <span class="hljs-keyword">const</span> shouldRest =
    <span class="hljs-built_in">Math</span>.abs(nextVelocity) &#x3C; precision &#x26;&#x26;
    <span class="hljs-built_in">Math</span>.abs(nextValue - toValue) &#x3C; precision;

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">velocity</span>: shouldRest ? <span class="hljs-number">0</span> : nextVelocity,
    <span class="hljs-attr">value</span>: shouldRest ? toValue : nextValue
  };
};</code></pre>
<p>Ensuite, une simple fonction <code>spring</code> qui reproduit √† peu de choses pr√®s la
m√©canique de notre <code>createTransition</code> vu plus haut :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> spring = ({
  stiffness = <span class="hljs-number">180</span>,
  damping = <span class="hljs-number">12</span>,
  onRest = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {},
  toValue
}) => <span class="hljs-function"><span class="hljs-params">onUpdate</span> =></span> {
  <span class="hljs-keyword">let</span> frame;
  <span class="hljs-keyword">const</span> tick = <span class="hljs-function"><span class="hljs-params">curr</span> =></span> {
    <span class="hljs-comment">// on calcule l'√©tat</span>
    <span class="hljs-keyword">const</span> { velocity, value } = step(
      curr.value,
      curr.velocity,
      toValue,
      stiffness,
      damping
    );
    onUpdate({ velocity, value });
    <span class="hljs-comment">// si l'animation n'est pas termin√©e</span>
    <span class="hljs-keyword">if</span> (velocity !== <span class="hljs-number">0</span> || value !== toValue) {
      <span class="hljs-comment">// on programme la prochaine frame</span>
      frame = requestAnimationFrame(<span class="hljs-function"><span class="hljs-params">()</span> =></span> tick({ value, velocity }));
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-comment">// sinon on pr√©vient que l'animation est au repos</span>
      onRest();
    }
  };
  <span class="hljs-keyword">return</span> {
    <span class="hljs-comment">// afin de permettre aux animations de s'encha√Æner, la fonction `start` prend l'√©tat actuel de la valeur</span>
    start: <span class="hljs-function"><span class="hljs-params">value</span> =></span> {
      frame = requestAnimationFrame(<span class="hljs-function"><span class="hljs-params">()</span> =></span> tick(value));
    },
    <span class="hljs-attr">stop</span>: <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
      cancelAnimationFrame(frame);
    }
  };
};</code></pre>
<p>Il nous reste √† cr√©er une classe "observable" <code>Value</code> qui conserve l'√©tat et
l'animation active. Cela permet de stopper l'animation en cours avant de lancer
la suivante lorsque cela arrive.</p>
<pre><code class="hljs language-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Value</span> </span>{
  <span class="hljs-keyword">constructor</span>(initialValue) {
    <span class="hljs-keyword">this</span>.value = {
      <span class="hljs-attr">value</span>: initialValue,
      <span class="hljs-attr">velocity</span>: <span class="hljs-number">0</span>
    };
    <span class="hljs-keyword">this</span>.listeners = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();
    <span class="hljs-keyword">this</span>.animation = <span class="hljs-literal">null</span>;
  }
  addListener(listener) {
    <span class="hljs-keyword">this</span>.listeners.add(listener);
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
      <span class="hljs-keyword">this</span>.listeners.delete(listener);
    };
  }
  updateValue(nextValue) {
    <span class="hljs-keyword">this</span>.value = nextValue;
    <span class="hljs-keyword">this</span>.listeners.forEach(<span class="hljs-function"><span class="hljs-params">listener</span> =></span> listener(<span class="hljs-keyword">this</span>.value.value));
  }
  animate(animation) {
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.animation) {
      <span class="hljs-keyword">this</span>.animation.stop();
    }
    <span class="hljs-keyword">this</span>.animation = animation(<span class="hljs-function"><span class="hljs-params">v</span> =></span> <span class="hljs-keyword">this</span>.updateValue(v));
    <span class="hljs-keyword">this</span>.animation.start(<span class="hljs-keyword">this</span>.value);
  }
}</code></pre>
<p>Et voil√†, vous avez une animation :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> scale = <span class="hljs-keyword">new</span> Value(<span class="hljs-number">1</span>);

scale.addListener(<span class="hljs-function"><span class="hljs-params">value</span> =></span> (myElement.style.transform = <span class="hljs-string">`scale(<span class="hljs-subst">${value}</span>)`</span>));

myElement.onmousedown = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
  scale.animate(spring({ <span class="hljs-attr">toValue</span>: <span class="hljs-number">2</span> }));
};

myElement.onmouseup = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
  scale.animate(spring({ <span class="hljs-attr">toValue</span>: <span class="hljs-number">1</span> }));
};</code></pre>
<iframe width="100%" height="300" src="//jsfiddle.net/bloodyowl/36d0nc7r/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<p>Les animations spring ont de nombreux avantages. Elles vous permettent
d'utiliser un vocabulaire coh√©rent avec celui du mouvement. Elles vous
permettent aussi de g√©rer de mani√®re intelligente le timing de vos animations :
plus besoin de <em>hardcoder</em> le temps qu'elles doivent mettre ; seule la
description du mouvement compte. Aussi, vous n'avez plus √† vous soucier des
changements de valeurs et de ses cons√©quences sur la coh√©rence globale d'une
animation : le syst√®me les g√®re et s'adapte.</p>
<p>Il existe plusieurs solutions pour les g√©rer :</p>
<ul>
<li>JS: <a href="http://facebook.github.io/rebound-js/examples/">Rebound.js</a></li>
<li>JS sp√©cifique React: <a href="https://github.com/chenglou/react-motion">react-motion</a></li>
<li>JS sp√©cifique React, utilis√© par react-native:
<a href="https://github.com/animatedjs/animated">Animated</a></li>
<li>Java (Android): <a href="http://facebook.github.io/rebound/">Rebound</a></li>
<li>Objective-C/Swift (iOS): <a href="https://github.com/facebook/pop">Pop</a></li>
</ul>
<p>La team WebKit <a href="https://twitter.com/webkit/status/748573524734812161">a √©galement
propos√©</a> l'ajout d'une
fonction <code>spring</code> √† CSS mais la discussion stagne (√† tester dans Safari
Technology Preview).</p>
<p>En esp√©rant que √ßa vous donne des id√©es d'animations cool √† faire.</p>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/css/animations/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/css/animations/</guid><pubDate>Tue, 20 Dec 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[On lance un podcast]]></title><description><![CDATA[<p>√áa fait quelques mois qu'on en parle au sein de l'√©quipe de contributeurs, et
c'est un projet qui a mis du temps √† se d√©velopper mais le voil√† enfin.</p>
<p>On a pass√© pas mal de temps √† pr√©parer le format, √† se motiver √† le faire et √†
acheter le mat√©riel.</p>
<p>Ce premier √©pisode est encore un peu maladroit (on apprend sur le tas) mais on a
bon espoir de l'am√©liorer avec le temps.</p>
<p>Cet √©pisode 1 est intitul√© ‚Ä¶</p>
<h2 id="en-beta-emb√™tant"><a href="#en-beta-emb%C3%AAtant" class="phenomic-HeadingAnchor">#</a><em>En beta, emb√™tant</em></h2>
<p>Y participent :</p>
<ul>
<li>Maxime alias <a href="https://twitter.com/MoOx">MoOx</a></li>
<li>Mathieu alias <a href="https://twitter.com/Zoontek">Zoontek</a></li>
<li>Georges alias <a href="https://twitter.com/skinnyfoetusboy">skinnyfoetusboy</a></li>
<li>Matthias alias <a href="https://twitter.com/bloodyowl">bloodyowl</a></li>
</ul>
<p>et on vous y parle de :</p>
<ul>
<li>Yarn, le client NPM</li>
<li>Webpack 2</li>
<li>dotCSS, un retour sur chaque conf√©rence</li>
<li>Sketch 41</li>
<li>Origami Studio</li>
</ul>
<p>√âvidemment on digresse SANS ARR√äT, √ßa manque de structure et le son a quelques
soucis, on vous demande d'√™tre indulgents l√†-dessus : faut bien commencer
quelque part üò∂</p>
<p>Faites-nous part de vos retours pour qu'on puisse am√©liorer ce podcast √† chaque
√©pisode.</p>
<p>On esp√®re que √ßa vous plaira !</p>
<p>Bisous.</p>
<iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/297382854&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<h3 id="edit"><a href="#edit" class="phenomic-HeadingAnchor">#</a>Edit:</h3>
<ul>
<li>Le
<a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de
Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/1/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/1/</guid><pubDate>Mon, 12 Dec 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[2 ans avec React, Babel, Webpack et cie]]></title><description><![CDATA[<p>Depuis fin 2014, et un virage radical vers l'√©cosyst√®me React, j'ai eu
l'occasion de mener plusieurs projets (applis pros, mobiles/hybrides, sites
web...) sur cette stack : React, Webpack, Babel, npm...</p>
<p>Ces deux ann√©es ont √©t√© tr√®s prolifiques dans la communaut√© JavaScript et React,
le tooling est encore parfois exotique, mais il se stabilise et de gros progr√®s
ont √©t√© faits sur la documentation.</p>
<p><strong>Nous disposons maintenant d'un √©cosyst√®me incroyablement riche et dynamique,
et d'un paradigme "universel" pour construire les applications de demain, web ou
natives.</strong></p>
<p>React est la biblioth√®que de facto pour ce type d'applications, mais on peut le
remplacer assez facilement par une alternative comme
<a href="https://preactjs.com/">Preact</a> ou <a href="http://infernojs.org/">Inferno</a>, donc toutes
les connaissances acquises sur cette biblioth√®que <strong>et son √©cosyst√®me</strong> sont
exploitables ailleurs dans la communaut√© JavaScript.</p>
<p>Voici un petit recap de cette stack magique :)</p>
<h2 id="tldr"><a href="#tldr" class="phenomic-HeadingAnchor">#</a>TL;DR;</h2>
<p>React en lui-m√™me est le plus simple √† appr√©hender dans cette stack.</p>
<p>Son √©cosyst√®me, riche et √©volutif, l'est moins.</p>
<h2 id="babeles2015"><a href="#babeles2015" class="phenomic-HeadingAnchor">#</a>Babel/ES2015</h2>
<p><img src="/assets/babel.png"></p>
<h3 id="use-next-generation-javascript-today"><a href="#use-next-generation-javascript-today" class="phenomic-HeadingAnchor">#</a>Use next generation JavaScript, today.</h3>
<p>La communaut√© JavaScript a massivement adopt√© le transpileur Babel, qui permet
de coder en JavaScript version ES2015 ou sup√©rieure puis de convertir en code
compatible avec les navigateurs du march√©.</p>
<p>Pour apprendre ES2015 et plus :</p>
<ul>
<li><a href="http://putaindecode.io/fr/tag/ES6">articles sur putaindecode.io</a></li>
<li>exercices en ligne : <a href="http://es6katas.org">es6katas.org</a></li>
<li>tutorial Babel : <a href="http://babeljs.io/docs/learn-es2015">babeljs.io</a></li>
<li>comparaisons ES5/ES2015 :
<a href="http://es6-features.org/#BlockScopedVariables">es6-features.org</a></li>
</ul>
<p>Vous pouvez tr√®s bien faire de l'ES2015 sans Babel, puisque <a href="https://kangax.github.io/compat-table/es6/">les navigateurs
modernes en supportent une grande
partie</a>, mais le support est in√©gal,
d'o√π l'id√©e d'utiliser un transpileur comme Babel qui convertit en ES5.</p>
<p>Le format JSX, est devenu un standard qui peut simplifier le d√©veloppement :</p>
<ul>
<li>il permet de centraliser la pr√©sentation et la logique d'un composant au m√™me
endroit</li>
<li>d'utiliser une syntaxe XML-like plus rigoureuse, mais b√©n√©fique</li>
<li>d'utiliser du JavaScript pur au lieu d'un pseudo-langage comme on trouve dans
les moteurs de template habituels</li>
</ul>
<p>√áa peut para√Ætre d√©routant au d√©but mais √ßa rentre vite !</p>
<p>Plus d'infos sur JSX dans <a href="https://facebook.github.io/react/docs/introducing-jsx.html">Introducing
JSX</a> sur la doc
React.</p>
<h2 id="npm"><a href="#npm" class="phenomic-HeadingAnchor">#</a>npm</h2>
<p><img src="/assets/npm.png"></p>
<p>Quel que soit votre besoin, il y a s√ªrement d√©j√† un module npm pour √ßa :)</p>
<p>Pour bien choisir vos packages, regardez l'activit√© du projet sur GitHub
(commits, issues, tests, contributeurs...)</p>
<h3 id="moins-de-code-cest-moins-de-bugs"><a href="#moins-de-code-cest-moins-de-bugs" class="phenomic-HeadingAnchor">#</a>Moins de code c'est moins de bugs</h3>
<p>Votre appli doit utiliser un maximum de code externe, qui est d√©j√† valid√©,
test√©... s√©par√©ment. Publiez un maximum de modules ind√©pendants, en open source
si possible, et utilisables hors-contexte (<a href="https://addyosmani.com/first/">FIRST
principle</a>).</p>
<p>Ceci implique de suivre les corrections/√©volutions des dits modules et
d'utiliser le <a href="https://docs.npmjs.com/getting-started/semantic-versioning">semantic
versioning</a> √† bon
escient.</p>
<p>NB: Dans sa lanc√©e open-source, Facebook vient de publier une alternative au CLI
npm : <a href="http://yarnpkg.org">yarn</a> plus rapide, fiable et s√©curis√©.</p>
<h2 id="webpack"><a href="#webpack" class="phenomic-HeadingAnchor">#</a>Webpack</h2>
<p><img src="/assets/webpack.png"></p>
<h3 id="le-saviez-vous-"><a href="#le-saviez-vous-" class="phenomic-HeadingAnchor">#</a>Le saviez-vous ?</h3>
<p>Webpack a co√ªt√© aux devs <strong>2.312.533 heures</strong> en 2015. Par jour.</p>
<h3 id="un-grand-pouvoir-implique-de-grandes-responsabilit√©s"><a href="#un-grand-pouvoir-implique-de-grandes-responsabilit%C3%A9s" class="phenomic-HeadingAnchor">#</a>Un grand pouvoir implique de grandes responsabilit√©s</h3>
<p>Webpack est puissant, il remplace browserify ou vos multiples t√¢ches grunt,
gulp, blurp... qui g√©raient votre pipeline d'assets.</p>
<p>√Ä partir du point d'entr√©e de votre application uniquement, par exemple
<code>index.js</code>, il est capable de servir et bundler toutes les d√©pendances (code,
images, CSS...) de votre projet automatiquement, gr√¢ce aux nombreux
<a href="https://webpack.github.io/docs/loaders.html">loaders</a>.</p>
<p>Pour cela, les assets doivent √™tre correctement d√©clar√©s dans le code :</p>
<pre><code class="hljs language-js"><span class="hljs-comment">// require some CSS</span>
<span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">"./styles.css"</span>;
<span class="hljs-keyword">const</span> ex1 = <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{styles.title}</span>></span>title<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>;

<span class="hljs-comment">// require an image</span>
<span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">"./logo.png"</span>;
<span class="hljs-keyword">const</span> img = <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{logo}</span> /></span>;</span></code></pre>
<p>Et la c√©l√®bre <a href="https://webpack.js.org/configuration/">config de webpack</a> permet
de tuner votre build √† tous les niveaux.</p>
<p>Plus de d√©tails sur Webpack sur <a href="http://putaindecode.io/fr/tag/webpack">les articles Putain de code !
d√©di√©s</a>.</p>
<h2 id="css"><a href="#css" class="phenomic-HeadingAnchor">#</a>CSS</h2>
<p><img src="/assets/css-modules.png"></p>
<h3 id="le-saviez-vous--1"><a href="#le-saviez-vous--1" class="phenomic-HeadingAnchor">#</a>Le saviez-vous ?</h3>
<p>Le CSS est un sport de haut niveau.</p>
<h3 id="css-in-2016"><a href="#css-in-2016" class="phenomic-HeadingAnchor">#</a>CSS in 2016</h3>
<p>Selon la complexit√© de vos designs, le CSS peut √™tre ce qui prend le plus de
temps, entre l'int√©gration, le responsive, et les animations.</p>
<p>Et la qualit√© et la modularit√© du CSS est essentielle pour la maintenabilit√© des
applications.</p>
<p>Pour cr√©er des composants r√©utilisables nous pouvons maintenant utiliser les
<a href="https://github.com/css-modules/css-modules">CSS modules</a>, qui ont l'avantage
d'√™tre du CSS classique, mais d'√™tre scop√©s aux composants, et, accessibles
depuis le JavaScript (plus de CSS global). Et le <a href="https://youtu.be/WyFGfMFjfH4?t=26m23s">CSS in
JS</a> peut compl√©ter/remplacer si besoin
pour les cas les plus dynamiques.</p>
<p>A d√©faut, vous pouvez toujours utiliser du CSS global si vous respectez
scrupuleusement les <a href="http://putaindecode.io/fr/articles/css/bem/">conventions
BEM</a>. D√©couvrez d'autres <a href="http://putaindecode.io/fr/tag/css">articles
d√©di√©s au CSS sur putaindecode.io</a>.</p>
<p>Il existe plusieurs biblioth√®ques de composants UI assez fournies pour React :</p>
<ul>
<li><a href="http://jxnblk.com/rebass/">rebass</a></li>
<li><a href="http://ant.design">ant.design</a></li>
<li><a href="http://semantic-ui.com">semantic-ui</a></li>
<li><a href="http://react-toolbox.com/">react-toolbox</a></li>
<li><a href="http://blueprintjs.com">blueprintjs</a></li>
</ul>
<p>Et voici un article recensant des <a href="http://davidwells.io/19-open-source-react-component-libraries-to-use-in-your-next-project/">librairies de composants React
open-source</a>.</p>
<h2 id="react--learn-once-run-everywhere"><a href="#react--learn-once-run-everywhere" class="phenomic-HeadingAnchor">#</a>React : Learn once, run everywhere</h2>
<p><img src="/assets/react.png"></p>
<p>Plus qu'une biblioth√®que ou un framework, React est un paradigme de
programmation d'interfaces utilisateurs, qui permet d'adresser de nombreuses
plateformes, avec toujours du code React "standard".</p>
<p>Th√©oriquement, une application cod√©e en React est capable de produire n'importe
quel output, par exemple du HTML pour le web, du natif avec
<a href="https://facebook.github.io/react-native/">react-native</a>, du
<a href="https://github.com/ProjectSeptemberInc/gl-react">WebGL</a>, du
<a href="https://github.com/Yomguithereal/react-blessed">terminal</a>, de la
<a href="https://github.com/FormidableLabs/react-music">musique</a>...</p>
<p>Et pour toutes ces targets, une convention g√©n√©rale s'applique :</p>
<pre><code style="font-size:2em">ui = f(state)</pre></code>
<p>√Ä tout moment, √† partir un <code>state</code> donn√©, une application ou un composant React
est capable de se "render" correctement dans l'√©tat d√©sir√©.</p>
<p>Le fonctionnement interne est donc plut√¥t straightforward, les composants se
passent simplement des <code>props</code> (valeurs et callbacks) de parent √† enfant, et
certains composants peuvent avoir un <code>state</code> local qui, une fois modifi√©,
d√©clenchera un re-render du composant et de ses descendants.</p>
<p>Les composants doivent √™tre simples, focus, composables.</p>
<pre><code class="hljs language-js">&#x3C;Toolbar>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Icon</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"success"</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{onClickSuccess}</span> /></span>
  </span>&#x3C;Menu>
    &#x3C;Icon name="warning" onClick={onClickWarning} />
    &#x3C;Icon name="error" onClick={onClickError} />
  &#x3C;/Menu>
&#x3C;/Toolbar>;</code></pre>
<p>Au niveau performances, React ne fait pas de miracles malgr√© le
<a href="http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/">virtual-dom</a>;</p>
<p>√Ä chaque fois qu'un composant re√ßoit de nouvelles props ou modifie son state,
React appelle la m√©thode <code>render</code> de ce dernier ainsi que de ces descendants.
M√™me s'il ne modifie pas le DOM, le fait de comparer les deux arbres retourn√©s
par render peut s'av√©rer co√ªteux si votre composant pr√©sente beaucoup de
contenu. Heureusement, React permet aux d√©veloppeurs d'intervenir avant le
render et l'annuler s'il n'est pas n√©cessaire avec <code>shouldComponentUpdate</code>.</p>
<p>Plus d'<a href="http://putaindecode.io/fr/tag/react">articles sur React sur putain de
code</a></p>
<h2 id="redux"><a href="#redux" class="phenomic-HeadingAnchor">#</a>Redux</h2>
<p><a href="https://css-tricks.com/learning-react-redux/"><img src="react-redux-csstricks.png" alt="React standard VS redux architecture (from
css-tricks.com)"></a></p>
<p>Pour les applications plus complexes, <a href="http://reduxjs.org">redux</a> va g√®rer
l'√©tat de l'application de mani√®re globale et externe aux composants,
standardiser les √©v√®nements (actions), g√©rer les re-renders, et permettre
d'aller vers des <a href="https://github.com/markerikson/redux-ecosystem-links">interactions plus
avanc√©es</a>.</p>
<p>Id√©alement, <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.j9rp2pr98">tous vos composants sont
dumbs</a>
et votre gestionnaire de state (par exemple redux) va g√©rer l'intelligence de
l'application et les re-renders de mani√®re d√©coupl√©e et optimis√©e.</p>
<p>Plus d'articles sur redux sur Putain de code ! :
<a href="http://putaindecode.io/fr/tag/redux/">http://putaindecode.io/fr/tag/redux/</a></p>
<h2 id="tips"><a href="#tips" class="phenomic-HeadingAnchor">#</a>Tips</h2>
<h3 id="storybook"><a href="#storybook" class="phenomic-HeadingAnchor">#</a>Storybook</h3>
<p>Utiliser un outil comme
<a href="https://github.com/storybooks/react-storybook">storybook</a> permet de travailler
sur les composants hors-contexte, de pouvoir les visualiser dans diff√©rents
√©tats pendant que vous travaillez... et ainsi d'avoir une base saine de
composants r√©utilisables.</p>
<p>Votre biblioth√®que de composants peut m√™me √™tre un projet √† part, que vous
importerez dans vos diff√©rentes applications. Par exemple, Cloudflare publie
s√©par√©ment <a href="https://github.com/cloudflare/cf-ui">tous ses composants UI
r√©utilisables</a>.</p>
<h3 id="composition"><a href="#composition" class="phenomic-HeadingAnchor">#</a>Composition</h3>
<p>Utilisez au maximum la composition de composants React pour garder des
composants simples et r√©utilisables.</p>
<p>Plus de d√©tails sur le <a href="http://putaindecode.io/fr/articles/js/react/higher-order-component">pattern "higher order
components"</a></p>
<h3 id="nvm"><a href="#nvm" class="phenomic-HeadingAnchor">#</a>nvm</h3>
<p>Utilisez <a href="https://github.com/creationix/nvm">Node Version Manager</a> aka nvm qui
permet de g√©rer plusieurs environnements Node.js sur une m√™me machine.
Indispensable pour travailler sur plusieurs projets.</p>
<h3 id="learning-curve"><a href="#learning-curve" class="phenomic-HeadingAnchor">#</a>Learning curve</h3>
<p>Concentrez-vous sur une techno/outil √† la fois et n'utilisez pas ce dont vous
n'avez pas encore besoin.</p>
<blockquote>
<p>Make it work, make it right, make it fast.</p>
</blockquote>
<h2 id="comment-d√©marrer-"><a href="#comment-d%C3%A9marrer-" class="phenomic-HeadingAnchor">#</a>Comment d√©marrer ?</h2>
<p>Pour cr√©er une application, le plus simple est d'utiliser
<a href="https://github.com/facebookincubator/create-react-app">create-react-app</a>.</p>
<p>Si c'est pour cr√©er un composant React que vous allez publier, alors
<a href="https://github.com/insin/nwb">nwb</a> est plus adapt√©.</p>
<p>Pour cr√©er un site web comme <a href="http://putaindecode.io">putaindecode.io</a> vous
pouvez utiliser un g√©n√©rateur de site statique comme
<a href="http://phenomic.io">phenomic.io</a>.</p>
<h2 id="pourquoi-cest-si-complexe-"><a href="#pourquoi-cest-si-complexe-" class="phenomic-HeadingAnchor">#</a>Pourquoi c'est si complexe ?</h2>
<p>Cette stack, qui peut para√Ætre lourde en outillage, permet de cr√©er des apps
riches, performantes, testables, √©volutives, multi-plateformes.</p>
<p>Une fois l'outillage en place et assimil√©, la productivit√© est excellente
(ES2015, npm, tests, developer experience, dev/build/deploy...).</p>
<p>Dans la plupart des cas, les boilerplates cit√©s ci-dessus vous fournissent tout
le n√©cessaire.</p>
<h2 id="must-read-and-watch"><a href="#must-read-and-watch" class="phenomic-HeadingAnchor">#</a>Must read and watch</h2>
<ul>
<li><a href="https://facebook.github.io/react/tutorial/tutorial.html">Intro to React</a></li>
<li>Free videos
<a href="https://egghead.io/courses/react-fundamentals">egghead.io/react-fundamentals</a></li>
<li>Free videos
<a href="https://egghead.io/courses/getting-started-with-redux">egghead.io/getting-started-with-redux</a></li>
<li><a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367#.8swndjba2">You might not need
redux</a></li>
<li><a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.v583rvea1">Smart VS dumb
components</a></li>
<li><a href="http://putaindecode.io/fr/articles/js/react/higher-order-component/">Les patterns Provider &#x26; Higher-Order Component avec
React</a></li>
<li><a href="https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.t74wxicu0">React higher components in
depth</a></li>
</ul>
<h2 id="liens"><a href="#liens" class="phenomic-HeadingAnchor">#</a>Liens</h2>
<blockquote>
<p>Quelques p√©pites</p>
</blockquote>
<ul>
<li><a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> :
CLI complet pour faire une application react</li>
<li><a href="https://github.com/insin/nwb">nwb</a> : CLI complet faire un composant react
(dev,build,demo,tests,npm...)</li>
<li><a href="https://github.com/andreypopp/react-css-components">react-css-components</a> :
cr√©er des composants React √† partir de CSS</li>
<li><a href="https://github.com/markerikson/redux-ecosystem-links">redux-ecosystem-links</a></li>
<li><a href="https://docs.npmjs.com/misc/scripts">npm scripts docs</a></li>
<li><a href="https://github.com/ngokevin/aframe-react">aframe-react</a> : Build VR
experiences with A-Frame and React</li>
<li><a href="http://reactpatterns.com">reactpatterns.com</a> : quelques patterns react</li>
<li><a href="http://phenomic.io">phenomic.io</a> : react-based static site generator</li>
<li><a href="http://jsbooks.revolunet.com">jsbooks.revolunet.com</a> : free JavaScript ebooks</li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/frontend/2016-2-ans-avec-react-babel-webpack-et-cie/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/frontend/2016-2-ans-avec-react-babel-webpack-et-cie/</guid><pubDate>Thu, 01 Dec 2016 00:00:00 GMT</pubDate></item></channel></rss>